const e=JSON.parse('{"key":"v-4905af0b","path":"/basic-skill/algorithms/structure/union-find-structure.html","title":"并查集","lang":"zh-CN","frontmatter":{"description":"并查集 概念 用于存储不相交的集合 可以高效支持两种操作 Find(x)：返回 x 所属集合的“代表” Union(x, y): 合并包含 x 和 y 的两个集合 两种操作都可以在常量时间内完成 简单实现 主要思想：用有根树表示每个集合 每个节点都维护着一个到它的父节点的链接 根节点是对应集合的“代表” 例如: 两个集合{x, y, z} and {a, b, c, d}","head":[["meta",{"property":"og:url","content":"https://renfakai.com/basic-skill/algorithms/structure/union-find-structure.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"并查集"}],["meta",{"property":"og:description","content":"并查集 概念 用于存储不相交的集合 可以高效支持两种操作 Find(x)：返回 x 所属集合的“代表” Union(x, y): 合并包含 x 和 y 的两个集合 两种操作都可以在常量时间内完成 简单实现 主要思想：用有根树表示每个集合 每个节点都维护着一个到它的父节点的链接 根节点是对应集合的“代表” 例如: 两个集合{x, y, z} and {a, b, c, d}"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://renfakai.com/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-08T11:52:50.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"并查集"}],["meta",{"property":"article:modified_time","content":"2023-03-08T11:52:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并查集\\",\\"image\\":[\\"https://renfakai.com/\\"],\\"dateModified\\":\\"2023-03-08T11:52:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}]},{"level":2,"title":"Find(x)","slug":"find-x","link":"#find-x","children":[]},{"level":2,"title":"Union(x, y)","slug":"union-x-y","link":"#union-x-y","children":[]},{"level":2,"title":"Weighted quick-union","slug":"weighted-quick-union","link":"#weighted-quick-union","children":[]},{"level":2,"title":"Path Compression","slug":"path-compression","link":"#path-compression","children":[{"level":3,"title":"Path-Compression实现","slug":"path-compression实现","link":"#path-compression实现","children":[]},{"level":3,"title":"Java代码下载","slug":"java代码下载","link":"#java代码下载","children":[]},{"level":3,"title":"Go实现","slug":"go实现","link":"#go实现","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考材料","slug":"参考材料","link":"#参考材料","children":[]}],"git":{"createdTime":1678276370000,"updatedTime":1678276370000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":5.05,"words":1514},"filePathRelative":"basic-skill/algorithms/structure/union-find-structure.md","localizedDate":"2023年3月8日","excerpt":"<h1> 并查集</h1>\\n<h2> 概念</h2>\\n<ul>\\n<li>用于存储不相交的集合</li>\\n<li>可以高效支持两种操作\\n<ul>\\n<li><code>Find(x)</code>：返回 x 所属集合的“代表”</li>\\n<li><code>Union(x, y)</code>: 合并包含 x 和 y 的两个集合</li>\\n</ul>\\n</li>\\n<li>两种操作都可以在常量时间内完成</li>\\n<li>简单实现</li>\\n<li>主要思想：用有根树表示每个集合\\n<ul>\\n<li>每个节点都维护着一个到它的父节点的链接</li>\\n<li>根节点是对应集合的“代表”</li>\\n<li>例如: 两个集合<code>{x, y, z}</code> and <code>{a, b, c, d}</code>\\n</li>\\n</ul>\\n</li>\\n</ul>","copyright":{},"autoDesc":true}');export{e as data};
