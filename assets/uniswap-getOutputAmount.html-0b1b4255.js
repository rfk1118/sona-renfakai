import{_ as p,V as o,W as c,Y as s,a1 as n,Z as t,a0 as e,F as u}from"./framework-e54e0297.js";const i={},l=s("h1",{id:"getoutputamount",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#getoutputamount","aria-hidden":"true"},"#"),n(" GetOutputAmount")],-1),r={href:"https://github.com/rfk1118/v2-sdk/blob/main/src/entities/pair.ts",target:"_blank",rel:"noopener noreferrer"},k=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token doc-comment comment">/**
   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.
   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000
   * has the math deduction for the reserve calculation without fee-on-transfer fees.
   *
   * With fee-on-transfer tax, intuitively it&#39;s just:
   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn
   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee
   * where amountInWithFee is the amountIn after taking out the LP fees
   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)
   *
   * But we are illustrating the math deduction below to ensure that&#39;s the case.
   *
   * before swap A * B = K where A = reserveIn B = reserveOut
   *
   * after swap A&#39; * B&#39; = K where only k is a constant value
   *
   * getAmountOut
   *
   * A&#39; = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted
   * B&#39; = B - amountOut * (1 - amountOut.buyFeesBips / 10000)
   * amountOut = (B - B&#39;) / (1 - amountOut.buyFeesBips / 10000) # where A&#39; * B&#39; still is k
   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))
   *             /
   *             (1 - amountOut.buyFeesBips / 10000)
   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))
   *             /
   *             (1 - amountOut.buyFeesBips / 10000)
   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))
   *             /
   *             (1 - amountOut.buyFeesBips / 10000)
   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)
   *             /
   *             (1 - amountOut.buyFeesBips / 10000)
   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn
   *                                                    /
   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)
   *
   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn
   *                       /
   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)
   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000
   *                       /
   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)
   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn
   *                       /
   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)
   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)
   *                       /
   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)
   *                     = (B * inputAmountWithFeeAndTax)
   *                       /
   *                       (1000 * A + inputAmountWithFeeAndTax)
   *
   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee
   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)
   *
   * <span class="token keyword">@param</span> <span class="token parameter">inputAmount</span>
   */</span>
  <span class="token keyword">public</span> <span class="token function">getOutputAmount</span><span class="token punctuation">(</span>
    inputAmount<span class="token operator">:</span> CurrencyAmount<span class="token operator">&lt;</span>Token<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    calculateFotFees<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>CurrencyAmount<span class="token operator">&lt;</span>Token<span class="token operator">&gt;</span><span class="token punctuation">,</span> Pair<span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">involvesToken</span><span class="token punctuation">(</span>inputAmount<span class="token punctuation">.</span>currency<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;TOKEN&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSBI</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reserve0<span class="token punctuation">.</span>quotient<span class="token punctuation">,</span> <span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token constant">JSBI</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reserve1<span class="token punctuation">.</span>quotient<span class="token punctuation">,</span> <span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InsufficientReservesError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> inputReserve <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reserveOf</span><span class="token punctuation">(</span>inputAmount<span class="token punctuation">.</span>currency<span class="token punctuation">)</span>
    <span class="token keyword">const</span> outputReserve <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reserveOf</span><span class="token punctuation">(</span>inputAmount<span class="token punctuation">.</span>currency<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>token0<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>token1 <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>token0<span class="token punctuation">)</span>

    <span class="token keyword">const</span> percentAfterSellFees <span class="token operator">=</span> calculateFotFees <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">derivePercentAfterSellFees</span><span class="token punctuation">(</span>inputAmount<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">ZERO_PERCENT</span>
    <span class="token keyword">const</span> inputAmountAfterTax <span class="token operator">=</span> percentAfterSellFees<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token constant">ZERO_PERCENT</span><span class="token punctuation">)</span>
      <span class="token operator">?</span> CurrencyAmount<span class="token punctuation">.</span><span class="token function">fromRawAmount</span><span class="token punctuation">(</span>
          inputAmount<span class="token punctuation">.</span>currency<span class="token punctuation">,</span>
          percentAfterSellFees<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>inputAmount<span class="token punctuation">)</span><span class="token punctuation">.</span>quotient <span class="token comment">// fraction.quotient will round down by itself, which is desired</span>
        <span class="token punctuation">)</span>
      <span class="token operator">:</span> inputAmount

    <span class="token keyword">const</span> inputAmountWithFeeAndAfterTax <span class="token operator">=</span> <span class="token constant">JSBI</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>inputAmountAfterTax<span class="token punctuation">.</span>quotient<span class="token punctuation">,</span> _997<span class="token punctuation">)</span>
    <span class="token keyword">const</span> numerator <span class="token operator">=</span> <span class="token constant">JSBI</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>inputAmountWithFeeAndAfterTax<span class="token punctuation">,</span> outputReserve<span class="token punctuation">.</span>quotient<span class="token punctuation">)</span>
    <span class="token keyword">const</span> denominator <span class="token operator">=</span> <span class="token constant">JSBI</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">JSBI</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>inputReserve<span class="token punctuation">.</span>quotient<span class="token punctuation">,</span> _1000<span class="token punctuation">)</span><span class="token punctuation">,</span> inputAmountWithFeeAndAfterTax<span class="token punctuation">)</span>
    <span class="token keyword">const</span> outputAmount <span class="token operator">=</span> CurrencyAmount<span class="token punctuation">.</span><span class="token function">fromRawAmount</span><span class="token punctuation">(</span>
      inputAmount<span class="token punctuation">.</span>currency<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>token0<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>token1 <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>token0<span class="token punctuation">,</span>
      <span class="token constant">JSBI</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator<span class="token punctuation">)</span> <span class="token comment">// JSBI.divide will round down by itself, which is desired</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSBI</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>outputAmount<span class="token punctuation">.</span>quotient<span class="token punctuation">,</span> <span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InsufficientInputAmountError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> percentAfterBuyFees <span class="token operator">=</span> calculateFotFees <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">derivePercentAfterBuyFees</span><span class="token punctuation">(</span>outputAmount<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">ZERO_PERCENT</span>
    <span class="token keyword">const</span> outputAmountAfterTax <span class="token operator">=</span> percentAfterBuyFees<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token constant">ZERO_PERCENT</span><span class="token punctuation">)</span>
      <span class="token operator">?</span> CurrencyAmount<span class="token punctuation">.</span><span class="token function">fromRawAmount</span><span class="token punctuation">(</span>
          outputAmount<span class="token punctuation">.</span>currency<span class="token punctuation">,</span>
          outputAmount<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>percentAfterBuyFees<span class="token punctuation">)</span><span class="token punctuation">.</span>quotient <span class="token comment">// fraction.quotient will round down by itself, which is desired</span>
        <span class="token punctuation">)</span>
      <span class="token operator">:</span> outputAmount
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSBI</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>outputAmountAfterTax<span class="token punctuation">.</span>quotient<span class="token punctuation">,</span> <span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InsufficientInputAmountError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      outputAmountAfterTax<span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span>inputReserve<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>inputAmountAfterTax<span class="token punctuation">)</span><span class="token punctuation">,</span> outputReserve<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>outputAmountAfterTax<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解读" tabindex="-1"><a class="header-anchor" href="#解读" aria-hidden="true">#</a> 解读</h2>`,2),d={href:"https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/Uniswap/v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset</span>
<span class="token keyword">function</span> <span class="token function">getAmountOut</span><span class="token punctuation">(</span>uint amountIn<span class="token punctuation">,</span> uint reserveIn<span class="token punctuation">,</span> uint reserveOut<span class="token punctuation">)</span> internal pure <span class="token function">returns</span> <span class="token punctuation">(</span>uint amountOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>amountIn <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>reserveIn <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> reserveOut <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint amountInWithFee <span class="token operator">=</span> amountIn<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">997</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint numerator <span class="token operator">=</span> amountInWithFee<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>reserveOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint denominator <span class="token operator">=</span> reserveIn<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>amountInWithFee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    amountOut <span class="token operator">=</span> numerator <span class="token operator">/</span> denominator<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据<code>stackexchange</code>解读上面合约中的代码。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 0.3%，即A增了99.7</span>
<span class="token constant">A</span>&#39; <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">+</span> <span class="token number">0.997</span> <span class="token operator">*</span> amountIn  # here <span class="token number">0.3</span><span class="token operator">%</span> <span class="token keyword">is</span> deducted
<span class="token comment">// 换出去的</span>
<span class="token constant">B</span>&#39; <span class="token operator">=</span> <span class="token constant">B</span> <span class="token operator">-</span> amountOut
<span class="token comment">// 差值</span>
amountOut <span class="token operator">=</span> <span class="token constant">B</span> <span class="token operator">-</span> <span class="token constant">B</span><span class="token string">&#39; # where A&#39;</span> <span class="token operator">*</span> <span class="token constant">B</span>&#39; still <span class="token keyword">is</span> k
           <span class="token comment">//  k不变的情况下 用K / A变换后即是变化后的B</span>
          <span class="token operator">=</span> <span class="token constant">B</span> <span class="token operator">-</span> <span class="token constant">K</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">+</span> <span class="token number">0.997</span> <span class="token operator">*</span> amountIn<span class="token punctuation">)</span>
          <span class="token comment">// B增加分母</span>
          <span class="token operator">=</span> <span class="token constant">B</span> <span class="token operator">-</span> <span class="token constant">AB</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">+</span> <span class="token number">0.997</span> <span class="token operator">*</span> amountIn<span class="token punctuation">)</span>
          <span class="token comment">// B = B * (A + 0.997 * amountIn) / (A + 0.997 * amountIn)</span>
          <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token operator">*</span> <span class="token constant">A</span> <span class="token operator">+</span> <span class="token constant">B</span> <span class="token operator">*</span> <span class="token number">0.997</span> <span class="token operator">*</span> amountIn <span class="token operator">-</span> <span class="token constant">AB</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">+</span> <span class="token number">0.997</span> <span class="token operator">*</span> amountIn<span class="token punctuation">)</span>
          <span class="token comment">// AB消掉</span>
          <span class="token operator">=</span> <span class="token constant">B</span> <span class="token operator">*</span> <span class="token number">0.997</span> <span class="token operator">*</span> amountIn <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">+</span> <span class="token number">0.997</span> <span class="token operator">*</span> amountIn<span class="token punctuation">)</span>
          <span class="token comment">//  修改小数为整数</span>
          <span class="token operator">=</span> <span class="token constant">B</span> <span class="token operator">*</span> <span class="token number">997</span> <span class="token operator">*</span> amountIn <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token constant">A</span> <span class="token operator">+</span> <span class="token number">997</span> <span class="token operator">*</span> amountIn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function b(A,h){const a=u("ExternalLinkIcon");return o(),c("div",null,[l,s("p",null,[n("代币兑换使用池子中数据，"),s("a",r,[n("代码"),t(a)]),n("如下：")]),k,s("p",null,[n("上面那个公式并没有给出特定费率，先解读"),s("a",d,[n("why-997-and-1000"),t(a)]),n("，在合约中计计算可以参考"),s("a",m,[n("UniswapV2Library#getAmountOut"),t(a)]),n(",代码如下：")]),v])}const y=p(i,[["render",b],["__file","uniswap-getOutputAmount.html.vue"]]);export{y as default};
