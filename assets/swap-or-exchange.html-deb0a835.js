import{_ as l,V as i,W as u,X as n,a0 as s,Y as a,Z as r,$ as p,F as e}from"./framework-5793c714.js";const k={},d=n("h1",{id:"交换还是移动",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#交换还是移动","aria-hidden":"true"},"#"),s(" 交换还是移动？")],-1),m=n("h2",{id:"交换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#交换","aria-hidden":"true"},"#"),s(" 交换")],-1),v={style:{"text-align":"center"}},b=n("p",null,"数据处理流程如图所示",-1),h=n("h3",{id:"优点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#优点","aria-hidden":"true"},"#"),s(" 优点")],-1),g={href:"https://cs.opensource.google/go/go/+/refs/tags/go1.17.8:src/container/heap/heap.go",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>func up(h Interface, j int) {
  for {
    i := (j - 1) / 2 // parent
    if i == j || !h.Less(j, i) {
      break
    }
    // 使用交换原则
    h.Swap(i, j)
    j = i
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f={href:"https://algs4.cs.princeton.edu/24pq/Heap.java.html",target:"_blank",rel:"noopener noreferrer"},_=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> pq<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 堆化</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token function">sink</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 进行交换</span>
        <span class="token function">exch</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sink</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 三方变量</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> swap <span class="token operator">=</span> pq<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    pq<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    pq<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> swap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><p>性能低，n个元素交换，使用三方变量会进行 3(n-1）赋值，使用异或交换有需要 2(n-1）赋值。</p><h2 id="移动" tabindex="-1"><a class="header-anchor" href="#移动" aria-hidden="true">#</a> 移动</h2>`,4),y={style:{"text-align":"center"}},x=n("p",null,"数据（非对象类型）处理流程如图所示",-1),j=p(`<p>先移动其他数据到正确位置，在放置需要排序的数据</p><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> 优点</h3><p>性能高，数据交换、赋值次数少，使用 n+1次移动。</p><h3 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点</h3><p>代码理解负责，维护成本高。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDownComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>
      <span class="token keyword">int</span> half <span class="token operator">=</span> size <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// loop while a non-leaf</span>
      <span class="token comment">// 先移动数据</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 假定只有左孩子</span>
          <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// assume left child is least</span>
          <span class="token class-name">Object</span> c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token comment">// 如果有右孩子，并且右孩子还小于左孩子</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span>
              <span class="token comment">// 弱序性</span>
              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
              c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token comment">// 移动策略</span>
          queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
          k <span class="token operator">=</span> child<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 放到正确位置</span>
      queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>如果项目没有特别高性能要求，建议使用交换编写代码，后期维护成本低。</p>`,8);function q(E,T){const c=e("RouterLink"),t=e("Mermaid"),o=e("ExternalLinkIcon");return i(),u("div",null,[d,m,n("p",null,[s("数据交换最常用、简单的交换方式就是使用临时变量，对象和内置数据都可使用，如果需要交换的数据是内置数据（非引用），可以使用"),a(c,{to:"/basic-skill/algorithms/bit/xor.html"},{default:r(()=>[s("异或交换")]),_:1}),s("进行交换，以达到节省空间目的。")]),n("div",v,[a(t,{id:"mermaid-10",code:"eJwrTi0sTc1LTnXJTEwvSszlUgACR107O+2Q1NwCK4WnS3qfdmx72rHhyY4tz6Zve7578vOmnWBFTiBFjlYKTs+X737atQKoxBEsDtIHknKyQtYCV+SE0EzIBmeIMQrOEM0QnTDjnbEb78wFAIwQYgk="}),b]),h,n("p",null,[s("易理解、易维护，具体参考"),n("a",g,[s("Go-heap-h.Swap(i, j)"),a(o)]),s("代码。")]),w,n("p",null,[n("a",f,[s("《算法4》"),a(o)]),s("一书也是方便大家理解，默认使用了交换原则。")]),_,n("div",y,[a(t,{id:"mermaid-36",code:"eJwrTi0sTc1LTnXJTEwvSszlUgACR107O+2Q1NwCK4WnS3qfdmx72rHhyY4tz6Zve7578vOmnWBFTiBFjlYKz5fvftq1wunZ1A3PetcBFTqCZZ1Bsk4wWWe4rBNY1gUk6wyTdYHLOoNlQTaDFLhYQeQhVsMVuXABAFxpVHs="}),x]),j])}const C=l(k,[["render",q],["__file","swap-or-exchange.html.vue"]]);export{C as default};
