import{_ as c,V as l,W as i,X as n,a0 as s,Y as a,Z as r,$ as t,F as o}from"./framework-fd210779.js";const u="/assets/atomicInteger-123a974d.png",d="/assets/atom-19255684.jpg",k="/assets/atom-w1-ce651189.png",m="/assets/atom-w2-74765468.png",v="/assets/atom-w3-18ac4847.png",b="/assets/atom-w4-16693ed3.png",g="/assets/atom-getAndSetInt-78022fc4.png",h={},f=t(`<h1 id="cas" tabindex="-1"><a class="header-anchor" href="#cas" aria-hidden="true">#</a> cas</h1><p>使用<code>java.util.concurrent.atomic</code>包下的<code>AtomicInteger</code>探索<code>cas</code>，包下代码符合ocp原则，使用<code>AtomicInteger</code>进行梳理即可。</p><table><thead><tr><th>分组</th><th style="text-align:right;">类</th></tr></thead><tbody><tr><td>基础数据型</td><td style="text-align:right;">AtomicInteger AtomicBoolean AtomicLong</td></tr><tr><td>数组型</td><td style="text-align:right;">AtomicIntegerArray AtomicLongArray AtomicReferenceArray</td></tr><tr><td>字段更新器</td><td style="text-align:right;">AtomicIntegerFieldUpdater AtomicLongFieldUpdater AtomicReferenceFieldUpdater</td></tr><tr><td>引用型</td><td style="text-align:right;">AtomicReference AtomicMarkableReference AtomicStampedReference</td></tr></tbody></table><h2 id="内存布局" tabindex="-1"><a class="header-anchor" href="#内存布局" aria-hidden="true">#</a> 内存布局</h2><p>查看<code>AtomicInteger</code>源码，我们会产生疑惑，<code>unsafe,valueOffset</code>是什么东西？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicInteger</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>

    <span class="token comment">// 这个是干什么的呢？不知道</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这又是什么呢？</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span>objectFieldOffset
                <span class="token punctuation">(</span><span class="token class-name">AtomicInteger</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token comment">// 方法暂时忽略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用一段代码来解释<code>unsafe,valueOffset</code>到底是什么？先引入<code>pom</code>文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jol<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jol<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">0.9</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写代码输出<code>AtomicInteger</code>对象内存布局。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出数据中可以看到<code>AtomicInteger.value</code>在对象布局的<code>OFFSET = 12</code>处，现在是使用<code>jol-core</code>进行打印的，如果我们想在代码中使用<code>OFFSET</code>要怎么使用呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span>AtomicInteger</span> object internals<span class="token operator">:</span>
 <span class="token constant">OFFSET</span>  <span class="token constant">SIZE</span>   <span class="token constant">TYPE</span> <span class="token constant">DESCRIPTION</span>                               <span class="token constant">VALUE</span>
      <span class="token number">0</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000001</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token number">4</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token number">8</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           bc <span class="token number">3d</span> <span class="token number">00</span> f8 <span class="token punctuation">(</span><span class="token number">10111100</span> <span class="token number">00111101</span> <span class="token number">00000000</span> <span class="token number">11111000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">134201924</span><span class="token punctuation">)</span>
     <span class="token number">12</span>     <span class="token number">4</span>    <span class="token keyword">int</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">.</span>value                       <span class="token number">0</span>
<span class="token class-name">Instance</span> size<span class="token operator">:</span> <span class="token number">16</span> bytes
<span class="token class-name">Space</span> losses<span class="token operator">:</span> <span class="token number">0</span> bytes internal <span class="token operator">+</span> <span class="token number">0</span> bytes external <span class="token operator">=</span> <span class="token number">0</span> bytes total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>debug</code>上面代码，从图中看到<code>valueOffset=12</code>，与对象内存布局是一样的，所以这个值在初始化时经被设置到<code>valueOffset</code>。 <img src="`+u+'" alt="An image"></p><h2 id="基地址-偏移地址" tabindex="-1"><a class="header-anchor" href="#基地址-偏移地址" aria-hidden="true">#</a> 基地址+偏移地址</h2>',14),_={href:"https://book.douban.com/subject/26912767/",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[n("img",{src:d,alt:"An image"})],-1),w={href:"https://book.douban.com/subject/25726019/",target:"_blank",rel:"noopener noreferrer"},j=n("img",{src:k,alt:"An image"},null,-1),A=n("img",{src:m,alt:"An image"},null,-1),I=n("img",{src:v,alt:"An image"},null,-1),x=n("img",{src:b,alt:"An image"},null,-1),E=t(`<h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h2><p><code>unsafe,valueOffset</code>困惑已经解开，对象存储为一个基地址，在其<code>基地址+偏移量</code>为需要更新值的内存地址，下面看一下常用方法</p><h3 id="unsafe-getandsetint" tabindex="-1"><a class="header-anchor" href="#unsafe-getandsetint" aria-hidden="true">#</a> unsafe.getAndSetInt</h3><p>debug代码，发现主要涉及到两个方法调用<code>getIntVolatile</code>和<code>compareAndSwapInt</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>     <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndSetInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> var5<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> var5<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看调用的参数，可以看到这里拿到了对象，也就是<code>基地址</code>，var2就是偏移地址</p><p><img src="`+g+'" alt="An image"></p>',7),S=n("code",null,"getIntVolatile",-1),O=n("code",null,"基地址 + 类型 * n",-1),F=n("code",null,"B + N * S",-1),B={href:"https://book.douban.com/subject/26912767/",target:"_blank",rel:"noopener noreferrer"},L=t(`<h3 id="unsafe-compareandswapint" tabindex="-1"><a class="header-anchor" href="#unsafe-compareandswapint" aria-hidden="true">#</a> unsafe.compareAndSwapInt</h3><p>这个方法调用的是native方法，对于方法的形容是支持原子操作，也就是<code>cmpxchg</code>指令</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span><span class="token keyword">long</span> offset<span class="token punctuation">,</span><span class="token keyword">int</span> expected<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>暂时只讲到了cas相关api，底层是直接操作内存地址，使用<code>cmpxchg</code>指令，关于其他unsafe相关功能，等到用到时在进行解释。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,6),U={href:"http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/9b8c96f96a0f/src/share/classes/sun/misc/Unsafe.java",target:"_blank",rel:"noopener noreferrer"},V={href:"https://book.douban.com/subject/26912767/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://book.douban.com/subject/25726019/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://book.douban.com/subject/27034721/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://book.douban.com/subject/26591326/",target:"_blank",rel:"noopener noreferrer"};function C(D,P){const e=o("ExternalLinkIcon"),p=o("RouterLink");return l(),i("div",null,[f,n("ul",null,[n("li",null,[n("a",_,[s("深入理解计算机系统（原书第 3 版）3.9 异质的数据结构"),a(e)])])]),y,n("ul",null,[n("li",null,[n("a",w,[s("汇编语言（第3版）8.6 寻址方式的综合应用"),a(e)]),j,A,I,x])]),E,n("p",null,[S,s("方法的形容如下，支持volatile语意和内存地址值获取，也就是可见性，volatile变量读，总是能看到（任意线程）对这个volatile变量最后的写入。代码注释讲解和上面"),a(p,{to:"/languages/java/thread/java/juc/atomic.html#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B8%83%E5%B1%80"},{default:r(()=>[s("数据结构布局")]),_:1}),s("基本一致，只是对于数组使用"),O,s("也就是"),F,s("，可以参考"),n("a",B,[s("深入理解计算机系统（原书第 3 版）3.8数组分配和访问"),a(e)])]),L,n("ul",null,[n("li",null,[n("a",U,[s("Unsafe"),a(e)])]),n("li",null,[n("a",V,[s("深入理解计算机系统（原书第 3 版）"),a(e)])]),n("li",null,[n("a",R,[s("汇编语言（第3版）"),a(e)])]),n("li",null,[n("a",N,[s("Java多线程编程实战指南（核心篇）"),a(e)])]),n("li",null,[n("a",T,[s("Java并发编程的艺术"),a(e)])])])])}const z=c(h,[["render",C],["__file","atomic.html.vue"]]);export{z as default};
