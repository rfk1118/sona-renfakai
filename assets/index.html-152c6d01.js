import{_ as t,V as i,W as n,Y as e,a1 as a,Z as o,a0 as l,F as d}from"./framework-1bd9c91b.js";const h={},s=e("h1",{id:"设计模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#设计模式","aria-hidden":"true"},"#"),a(" 设计模式")],-1),c=e("h2",{id:"如何学习设计模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#如何学习设计模式","aria-hidden":"true"},"#"),a(" 如何学习设计模式")],-1),_=e("p",null,"学习设计模式时需要有两个动作：使用设计模式、阅读源码。",-1),u={class:"hint-container tip"},b=e("p",{class:"hint-container-title"},"提示",-1),p={href:"https://book.douban.com/subject/1140457/",target:"_blank",rel:"noopener noreferrer"},f=l('<h3 id="使用设计模式" tabindex="-1"><a class="header-anchor" href="#使用设计模式" aria-hidden="true">#</a> 使用设计模式</h3><p>设计模式要在项目中常用(《刻意练习：如何从新手到大师》)，才能体会到各个模式的好坏，才能在合适的场景下将不同的设计模式组合起来，但是也不要为了设计而设计，这里有一个度，只有真正的把握了，才会不过度设计。如果过度设计了，需要及时修正，就像<code>ConcurrentHashMap</code>在<code>JDK1.8</code>之前、之后版本实现有所修正一样。</p><h3 id="阅读源码" tabindex="-1"><a class="header-anchor" href="#阅读源码" aria-hidden="true">#</a> 阅读源码</h3><p>很多源码使用的设计模式都不是标准格式，是在原基础上产生了变种，所以懂了设计模式，在看源码会产生事半功倍的效果。</p><h2 id="设计模式连接" tabindex="-1"><a class="header-anchor" href="#设计模式连接" aria-hidden="true">#</a> 设计模式连接</h2><h3 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式" aria-hidden="true">#</a> 创建型模式</h3><ul><li>Factory</li><li>Abstract Factory</li><li>Builder</li><li>Prototype</li><li>Singleton</li></ul><h3 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式" aria-hidden="true">#</a> 结构型模式</h3><ul><li>Adapter</li><li>Bridge</li><li>Composite</li><li>Decorator</li><li>Facade</li><li>Flyweight</li><li>Proxy</li></ul><h3 id="行为模式" tabindex="-1"><a class="header-anchor" href="#行为模式" aria-hidden="true">#</a> 行为模式</h3><ul><li>Chain of Responsibility</li><li>Command</li><li>Iterator</li><li>Mediator</li><li>Memento</li><li>Observer</li><li>State</li><li>Strategy</li><li>Template Method</li><li>Visitor</li></ul><h3 id="组合篇" tabindex="-1"><a class="header-anchor" href="#组合篇" aria-hidden="true">#</a> 组合篇</h3><p>先写完基础知识和简单应用，这里补充组合应用。</p><h2 id="推荐书籍" tabindex="-1"><a class="header-anchor" href="#推荐书籍" aria-hidden="true">#</a> 推荐书籍</h2>',14),m={href:"https://book.douban.com/subject/1052241/",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"C++",-1),x={href:"https://book.douban.com/subject/1140457/",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"Demo",-1),D={href:"https://book.douban.com/subject/30333919/",target:"_blank",rel:"noopener noreferrer"},y=e("li",null,[e("a",{href:"."},"Dive Into DESIGN PATTERNS"),a(" 本书案例比较好，后面文章以此为基础进行二次梳理，如有侵权，请邮件"),e("code",null,"rfk1118@icloud.com"),a("联系到我，我会按照版权进行删除。书籍请自行查找")],-1),j={href:"https://time.geekbang.org/column/intro/100039001",target:"_blank",rel:"noopener noreferrer"},v={href:"https://book.douban.com/subject/25844633/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://book.douban.com/subject/26819666/",target:"_blank",rel:"noopener noreferrer"};function N(S,V){const r=d("ExternalLinkIcon");return i(),n("div",null,[s,c,_,e("div",u,[b,e("p",null,[a("六大原则请参考"),e("a",p,[a("敏捷软件开发"),o(r)])])]),f,e("ul",null,[e("li",null,[e("a",m,[a("设计模式"),o(r)]),a(" 本书以"),k,a("编写，被别人誉为经典，其实本人读的不多。")]),e("li",null,[e("a",x,[a("敏捷软件开发"),o(r)]),a(" 本书给了大量"),g,a("，本人设计模式主要是从这本书中学习而来的。")]),e("li",null,[e("a",D,[a("架构整洁之道"),o(r)]),a(" 本书与《敏捷软件开发》中有部分重叠，会有一些设计模式应用补充，比如三方对接使用适配器模式开发，其核心还是架构设计思想。")]),y,e("li",null,[e("a",j,[a("设计模式之美"),o(r)]),a(" 前Google工程师手把手教你写高质量代码，这个讲的也不错，我印象最深的是接口隔离。")]),e("li",null,[e("a",v,[a("实现领域驱动设计"),o(r)])]),e("li",null,[e("a",C,[a("领域驱动设计"),o(r)]),a(" 设计模式后面就是领域驱动开发，用设计模式+领域驱动开发可以让项目更好维护，可以降低设计的复杂度，才能真正的将DDD进行落地，空谈DDD其实很空洞。")])])])}const E=t(h,[["render",N],["__file","index.html.vue"]]);export{E as default};
