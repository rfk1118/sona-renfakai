import{_ as n,V as s,W as a,a0 as e}from"./framework-e54e0297.js";const p={},t=e(`<h1 id="前序遍历" tabindex="-1"><a class="header-anchor" href="#前序遍历" aria-hidden="true">#</a> 前序遍历</h1><p>前序遍历（根，左，右）</p><ol><li>访问当前节点</li><li>调用当前节点左节点进行遍历</li><li>调用当前节点的右节点进行遍历</li></ol><h2 id="常用方式" tabindex="-1"><a class="header-anchor" href="#常用方式" aria-hidden="true">#</a> 常用方式</h2><ul><li>递归，方案比较简单，方式统一</li><li>loop，孔乙己茴字有几种写法</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h3><p>递归方式处理比较简单，先处理当前节点，左，右</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>head <span class="token operator">*</span>BinaryTree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token boolean">nil</span> <span class="token operator">==</span> head <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 访问当前节点</span>
  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;key:%d,value:%d\\n&quot;</span><span class="token punctuation">,</span> head<span class="token punctuation">.</span>key<span class="token punctuation">,</span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token comment">// 调用当前节点左节点进行遍历</span>
  <span class="token function">preOrder</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
  <span class="token comment">// 调用当前节点的右节点进行遍历</span>
  <span class="token function">preOrder</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loop" tabindex="-1"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> loop</h3><ol><li>茴字的第一种写法</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">preOrderWithLoopV1</span><span class="token punctuation">(</span>head <span class="token operator">*</span>BinaryTree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token boolean">nil</span> <span class="token operator">==</span> head <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  stack <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>BinaryTree<span class="token punctuation">{</span>head<span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    pop <span class="token operator">:=</span> stack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    stack <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;key:%d,value:%d\\n&quot;</span><span class="token punctuation">,</span> pop<span class="token punctuation">.</span>key<span class="token punctuation">,</span> pop<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token boolean">nil</span> <span class="token operator">!=</span> pop<span class="token punctuation">.</span>rightNode <span class="token punctuation">{</span>
      stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> pop<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token boolean">nil</span> <span class="token operator">!=</span> pop<span class="token punctuation">.</span>leftNode <span class="token punctuation">{</span>
      stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> pop<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>茴字的第二种写法，这种比较废人</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">preOrderWithLoopV2</span><span class="token punctuation">(</span>head <span class="token operator">*</span>BinaryTree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> stack <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>BinaryTree
  node <span class="token operator">:=</span> head
  <span class="token keyword">for</span> node <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> node <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;key:%d,value:%d\\n&quot;</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
      node <span class="token operator">=</span> node<span class="token punctuation">.</span>leftNode
    <span class="token punctuation">}</span>
    node <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    node <span class="token operator">=</span> node<span class="token punctuation">.</span>rightNode
    stack <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loop进阶版" tabindex="-1"><a class="header-anchor" href="#loop进阶版" aria-hidden="true">#</a> loop进阶版</h3><p>不使用递归，也不使用辅助栈，<code>Morris traversal for Preorder</code>方式进行前序遍历</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 前序遍历，不使用递归和栈辅助</span>
<span class="token keyword">func</span> <span class="token function">preOrderWithLoopMorris</span><span class="token punctuation">(</span>root <span class="token operator">*</span>BinaryTree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token boolean">nil</span> <span class="token operator">==</span> root <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> predecessor <span class="token operator">*</span>BinaryTree
  <span class="token keyword">var</span> current <span class="token operator">=</span> root
  <span class="token keyword">for</span> current <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果当前节点的左孩子为空，直接打印当前节点，并转向处理右节点</span>
    <span class="token keyword">if</span> current<span class="token punctuation">.</span>leftNode <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;key:%d,value:%d\\n&quot;</span><span class="token punctuation">,</span> current<span class="token punctuation">.</span>key<span class="token punctuation">,</span> current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      current <span class="token operator">=</span> current<span class="token punctuation">.</span>rightNode
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 查找当前节点的前驱节点</span>
      predecessor <span class="token operator">=</span> current<span class="token punctuation">.</span>leftNode
      <span class="token keyword">for</span> predecessor<span class="token punctuation">.</span>rightNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> predecessor<span class="token punctuation">.</span>rightNode <span class="token operator">!=</span> current <span class="token punctuation">{</span>
        predecessor <span class="token operator">=</span> predecessor<span class="token punctuation">.</span>rightNode
      <span class="token punctuation">}</span>

      <span class="token comment">// 第一次前驱节点的右节点肯为空，这里就是将前驱节点的后继指向当前节点，然后继续向下走</span>
      <span class="token keyword">if</span> predecessor<span class="token punctuation">.</span>rightNode <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        predecessor<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> current
        current <span class="token operator">=</span> current<span class="token punctuation">.</span>leftNode
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果回溯到当前节点，并且找前驱的时候，发现出了环，这个时候处理当前节点，并且向右移动</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;key:%d,value:%d\\n&quot;</span><span class="token punctuation">,</span> current<span class="token punctuation">.</span>key<span class="token punctuation">,</span> current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        predecessor<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token boolean">nil</span>
        current <span class="token operator">=</span> current<span class="token punctuation">.</span>rightNode
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>一般情况下使用递归写法简单，写起来比较快</li><li>使用<code>loop</code>方式，会在特殊情况下会有奇效，比如求每层二叉树平均值</li><li>在要求空间为常数，并且不能使用递归的情况下使用<code>Morris</code>，基本属于<code>hard</code>级别</li></ol>`,19),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","pre-order.html.vue"]]);export{r as default};
