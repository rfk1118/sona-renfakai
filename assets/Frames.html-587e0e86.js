const e=JSON.parse('{"key":"v-8193e048","path":"/languages/java/jvm/layout/Frames.html","title":"Frames","lang":"zh-CN","frontmatter":{"description":"Frames 官方文档 A frame is used to store data and partial results, as well as to perform dynamic linking, return values for methods, and dispatch exceptions. A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes, whether that completion is normal or abrupt (it throws an uncaught exception). Frames are allocated from the Java Virtual Machine stack (§2.5.2) of the thread creating the frame. Each frame has its own array of local variables (§2.6.1), its own operand stack (§2.6.2), and a reference to the run- time constant pool (§2.5.5) of the class of the current method. A frame may be extended with additional implementation-specific information, such as debugging information. The sizes of the local variable array and the operand stack are determined at compile-time and are supplied along with the code for the method associated with the frame (§4.7.3). Thus the size of the frame data structure depends only on the implementation of the Java Virtual Machine, and the memory for these structures can be allocated simultaneously on method invocation. Only one frame, the frame for the executing method, is active at any point in a given thread of control. This frame is referred to as the current frame, and its method is known as the current method. The class in which the current method is defined is the current class. Operations on local variables and the operand stack are typically with reference to the current frame. A frame ceases to be current if its method invokes another method or if its method completes. When a method is invoked, a new frame is created and becomes current when control transfers to the new method. On method return, the current frame passes back the result of its method invocation, if any, to the previous frame. The current frame is then discarded as the previous frame becomes the current one. Note that a frame created by a thread is local to that thread and cannot be referenced by any other thread.","head":[["meta",{"property":"og:url","content":"https://renfakai.com/languages/java/jvm/layout/Frames.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"Frames"}],["meta",{"property":"og:description","content":"Frames 官方文档 A frame is used to store data and partial results, as well as to perform dynamic linking, return values for methods, and dispatch exceptions. A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes, whether that completion is normal or abrupt (it throws an uncaught exception). Frames are allocated from the Java Virtual Machine stack (§2.5.2) of the thread creating the frame. Each frame has its own array of local variables (§2.6.1), its own operand stack (§2.6.2), and a reference to the run- time constant pool (§2.5.5) of the class of the current method. A frame may be extended with additional implementation-specific information, such as debugging information. The sizes of the local variable array and the operand stack are determined at compile-time and are supplied along with the code for the method associated with the frame (§4.7.3). Thus the size of the frame data structure depends only on the implementation of the Java Virtual Machine, and the memory for these structures can be allocated simultaneously on method invocation. Only one frame, the frame for the executing method, is active at any point in a given thread of control. This frame is referred to as the current frame, and its method is known as the current method. The class in which the current method is defined is the current class. Operations on local variables and the operand stack are typically with reference to the current frame. A frame ceases to be current if its method invokes another method or if its method completes. When a method is invoked, a new frame is created and becomes current when control transfers to the new method. On method return, the current frame passes back the result of its method invocation, if any, to the previous frame. The current frame is then discarded as the previous frame becomes the current one. Note that a frame created by a thread is local to that thread and cannot be referenced by any other thread."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://renfakai.com/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-27T13:59:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Frames"}],["meta",{"property":"article:modified_time","content":"2023-02-27T13:59:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Frames\\",\\"image\\":[\\"https://renfakai.com/\\"],\\"dateModified\\":\\"2023-02-27T13:59:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Local Variables","slug":"local-variables","link":"#local-variables","children":[]},{"level":2,"title":"Operand Stacks","slug":"operand-stacks","link":"#operand-stacks","children":[]},{"level":2,"title":"Dynamic Linking","slug":"dynamic-linking","link":"#dynamic-linking","children":[]},{"level":2,"title":"Normal Method Invocation Completion","slug":"normal-method-invocation-completion","link":"#normal-method-invocation-completion","children":[]},{"level":2,"title":"Abrupt Method Invocation Completion","slug":"abrupt-method-invocation-completion","link":"#abrupt-method-invocation-completion","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1677506353000,"updatedTime":1677506353000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":13.79,"words":4137},"filePathRelative":"languages/java/jvm/layout/Frames.md","localizedDate":"2023年2月27日","excerpt":"<h1> Frames</h1>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">官方文档</p>\\n<p>A frame is used to store data and partial results, as well as to perform dynamic linking, return values for methods, and dispatch exceptions.</p>\\n<p>A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes, whether that completion is normal or abrupt (it throws an uncaught exception). Frames are allocated from the Java Virtual Machine stack (§2.5.2) of the thread creating the frame. Each frame has its own array of local variables (§2.6.1), its own operand stack (§2.6.2), and a reference to the run- time constant pool (§2.5.5) of the class of the current method.</p>\\n<p>A frame may be extended with additional implementation-specific information, such as debugging information.</p>\\n<p>The sizes of the local variable array and the operand stack are determined at compile-time and are supplied along with the code for the method associated with the frame (§4.7.3). Thus the size of the frame data structure depends only on the implementation of the Java Virtual Machine, and the memory for these structures can be allocated simultaneously on method invocation.</p>\\n<p>Only one frame, the frame for the executing method, is active at any point in a given thread of control. This frame is referred to as the current frame, and its method is known as the current method. The class in which the current method is defined is the current class. Operations on local variables and the operand stack are typically with reference to the current frame.</p>\\n<p>A frame ceases to be current if its method invokes another method or if its method completes. When a method is invoked, a new frame is created and becomes current when control transfers to the new method. On method return, the current frame passes back the result of its method invocation, if any, to the previous frame. The current frame is then discarded as the previous frame becomes the current one.</p>\\n<p>Note that a frame created by a thread is local to that thread and cannot be referenced by any other thread.</p>\\n</div>","copyright":{},"autoDesc":true}');export{e as data};
