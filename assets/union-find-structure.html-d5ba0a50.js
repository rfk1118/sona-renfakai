import{_ as p,V as o,W as c,X as n,a0 as s,Y as e,$ as t,F as i}from"./framework-fd210779.js";const l="/assets/example-two-sets-5aea01ea.png",u="/assets/quick-find-overview-c5aa1aa2.png",r="/assets/quick-union-overview-5305e951.png",d="/assets/weighted-quick-union-overview-d1ab61fc.png",k={},v=t('<h1 id="并查集" tabindex="-1"><a class="header-anchor" href="#并查集" aria-hidden="true">#</a> 并查集</h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><ul><li>用于存储不相交的集合</li><li>可以高效支持两种操作 <ul><li><code>Find(x)</code>：返回 x 所属集合的“代表”</li><li><code>Union(x, y)</code>: 合并包含 x 和 y 的两个集合</li></ul></li><li>两种操作都可以在常量时间内完成</li><li>简单实现</li><li>主要思想：用有根树表示每个集合 <ul><li>每个节点都维护着一个到它的父节点的链接</li><li>根节点是对应集合的“代表”</li><li>例如: 两个集合<code>{x, y, z}</code> and <code>{a, b, c, d}</code><img src="'+l+`" alt="An image"></li></ul></li></ul><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token class-name">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 自己不是根节点，递归查找</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token class-name">L</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> x <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token class-name">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 直接连接</span>
    <span class="token class-name">L</span><span class="token punctuation">[</span><span class="token class-name">Find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-x" tabindex="-1"><a class="header-anchor" href="#find-x" aria-hidden="true">#</a> Find(x)</h2>`,6),m=n("li",null,[s("跟随从 x 的连接直到一个节点指向自己，这可能需要 O(n) 时间，但我们会让它更快 "),n("img",{src:u,alt:"An image"})],-1),b={href:"https://algs4.cs.princeton.edu/15uf/QuickFindUF.java.html",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"id[p]",-1),g=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickFindUF</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">;</span>    <span class="token comment">// id[i] = component identifier of i</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>   <span class="token comment">// number of components</span>
    <span class="token comment">// 其他省略</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">validate</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">validate</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">validate</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> pID <span class="token operator">=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// needed for correctness</span>
      <span class="token keyword">int</span> qID <span class="token operator">=</span> id<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// to reduce the number of array accesses</span>

      <span class="token comment">// p and q are already in the same component</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pID <span class="token operator">==</span> qID<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> id<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
          <span class="token comment">// 这里性能比较低，需要全部都修改</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pID<span class="token punctuation">)</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> qID<span class="token punctuation">;</span>
      count<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="union-x-y" tabindex="-1"><a class="header-anchor" href="#union-x-y" aria-hidden="true">#</a> Union(x, y)</h2>`,2),f=n("li",null,[s("运行 Find(x) 和 Find(y) 以找到对应的根节点并将一个指向另一个 "),n("img",{src:r,alt:"An image"})],-1),w={href:"https://algs4.cs.princeton.edu/15uf/QuickUnionUF.java.html",target:"_blank",rel:"noopener noreferrer"},y=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickUnionUF</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>  <span class="token comment">// parent[i] = parent of i</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>     <span class="token comment">// number of components</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootP <span class="token operator">==</span> rootQ<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里只变更了一个节点，所以需要变更的是根节点</span>
    parent<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">=</span> rootQ<span class="token punctuation">;</span>
    count<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">validate</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>
          p <span class="token operator">=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="weighted-quick-union" tabindex="-1"><a class="header-anchor" href="#weighted-quick-union" aria-hidden="true">#</a> Weighted quick-union</h2>`,2),_=n("li",null,[s("主要是将小子树挂到大子树上面 "),n("img",{src:d,alt:"An image"})],-1),x={href:"https://algs4.cs.princeton.edu/15uf/WeightedQuickUnionUF.java.html",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeightedQuickUnionUF</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>   <span class="token comment">// parent[i] = parent of i</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span>     <span class="token comment">// size[i] = number of elements in subtree rooted at i</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>      <span class="token comment">// number of components</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">validate</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>
        p <span class="token operator">=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootP <span class="token operator">==</span> rootQ<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 让小节点挂在到大节点上</span>
    <span class="token comment">// make smaller root point to larger one</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">&lt;</span> size<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">=</span> rootQ<span class="token punctuation">;</span>
        size<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        parent<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span> <span class="token operator">=</span> rootP<span class="token punctuation">;</span>
        size<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    count<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-compression" tabindex="-1"><a class="header-anchor" href="#path-compression" aria-hidden="true">#</a> Path Compression</h2><ul><li>在糟糕的情况下，树可能会变得太深 <ul><li>这会减慢未来的运行速度</li></ul></li><li>每次调用<code>Find()</code> 时，路径压缩都会使树变浅</li><li>只要根保持不变，我们不在乎树的样子 <ul><li><code>Find(x)</code>返回根后，回溯到 x 并将所有链接重新路由到根</li></ul></li></ul><h3 id="path-compression实现" tabindex="-1"><a class="header-anchor" href="#path-compression实现" aria-hidden="true">#</a> Path-Compression实现</h3><p>我们将假设链接存储在 L[]</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token class-name">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token class-name">L</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token class-name">Find</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 路径压缩</span>
    <span class="token class-name">L</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token class-name">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">==</span> <span class="token class-name">L</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token class-name">L</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Find</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java代码下载" tabindex="-1"><a class="header-anchor" href="#java代码下载" aria-hidden="true">#</a> Java代码下载</h3>`,7),F={href:"https://algs4.cs.princeton.edu/code/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/UF.java.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://mvnrepository.com/artifact/edu.princeton.cs/algs4/1.0.4",target:"_blank",rel:"noopener noreferrer"},q=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token operator">/</span>algs4 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>algs4<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.0</span><span class="token number">.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通用代码" tabindex="-1"><a class="header-anchor" href="#通用代码" aria-hidden="true">#</a> 通用代码</h4><ol><li>设计数据结构</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UF</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>  <span class="token comment">// parent[i] = parent of i</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rank<span class="token punctuation">;</span>   <span class="token comment">// rank[i] = rank of subtree rooted at i (never more than 31)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>初始化数据</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token function">UF</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    count <span class="token operator">=</span> n<span class="token punctuation">;</span>
    parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 自己指向自己</span>
        parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>可以忽略不重要代码</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 判断索引</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> parent<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> p <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;index &quot;</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">&quot; is not between 0 and &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="find-x-代码" tabindex="-1"><a class="header-anchor" href="#find-x-代码" aria-hidden="true">#</a> Find(x)代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Returns the component identifier for the component containing site <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">p</span></span><span class="token punctuation">}</span>.
*
* <span class="token keyword">@param</span>  <span class="token parameter">p</span> the integer representing one site
* <span class="token keyword">@return</span> the component identifier for the component containing site <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">p</span></span><span class="token punctuation">}</span>
* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> unless <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span> <span class="token operator">&lt;=</span> p <span class="token operator">&lt;</span> n</span></span><span class="token punctuation">}</span>
*/</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 校验索引</span>
  <span class="token function">validate</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果当前元素的父亲不是自己，继续查找</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 路径压缩</span>
      parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">[</span>parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// path compression by halving</span>
      p <span class="token operator">=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 找到了根节点</span>
  <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="union-x-y-代码" tabindex="-1"><a class="header-anchor" href="#union-x-y-代码" aria-hidden="true">#</a> Union(x, y)代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Merges the component containing site <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">p</span></span><span class="token punctuation">}</span> with the
* the component containing site <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">q</span></span><span class="token punctuation">}</span>.
*
* <span class="token keyword">@param</span>  <span class="token parameter">p</span> the integer representing one site
* <span class="token keyword">@param</span>  <span class="token parameter">q</span> the integer representing the other site
* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> unless
*         both <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span> <span class="token operator">&lt;=</span> p <span class="token operator">&lt;</span> n</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span> <span class="token operator">&lt;=</span> q <span class="token operator">&lt;</span> n</span></span><span class="token punctuation">}</span>
*/</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 查找p的根</span>
  <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 查找q的根</span>
  <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果相等，已经连接过了</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rootP <span class="token operator">==</span> rootQ<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

  <span class="token comment">// 集合数量多的不变，少的将父亲指向多的</span>
  <span class="token comment">// make root of smaller rank point to root of larger rank</span>
  <span class="token keyword">if</span>      <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">=</span> rootQ<span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">&gt;</span> rank<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span> <span class="token operator">=</span> rootP<span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 子树数量相等</span>
      parent<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span> <span class="token operator">=</span> rootP<span class="token punctuation">;</span>
      <span class="token comment">// 等级+1</span>
      rank<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 集合数量减1</span>
  count<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),U={id:"go实现",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#go实现","aria-hidden":"true"},"#",-1),I={href:"https://github.com/sona0402/leetcode/blob/master/src/structure/UF.go",target:"_blank",rel:"noopener noreferrer"},z=t(`<ol><li>创建数据结构</li></ol><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>type UF struct {
  parent, rank []int
  nComponents  int
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>初始化数据结构</li></ol><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>func newUF(initSize int) *UF {
  // 初始化数据结构
  uf := &amp;UF{
    parent:      make([]int, initSize),
    rank:        make([]int, initSize),
    nComponents: initSize,
  }
  // 子树等级初始化
  for index := range uf.rank {
    uf.rank[index] = 0
  }
  // 自己的父亲指向自己
  for index := range uf.parent {
    uf.rank[index] = index
  }
  return uf
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Find(x)</li></ol><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>func (uf *UF) find(item int) int {
  for item != uf.parent[item] {
    // 路径压缩
    uf.parent[item] = uf.parent[uf.parent[item]]
    // 向上走
    item = uf.parent[item]
  }
  return item
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Union(x, y)</li></ol><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>func (uf *UF) merge(p, q int) {
  // 查找p的根
  rootP := uf.find(p)
  // 查找q的根
  rootQ := uf.find(q)
  // 已经在一个集合里面了
  if rootQ == rootP {
    return
  }
  subTreeP := uf.rank[rootP]
  subTreeQ := uf.rank[rootQ]
  if subTreeP &lt; subTreeQ {
    uf.parent[rootP] = rootQ
  } else if subTreeP &gt; subTreeQ {
    uf.parent[rootQ] = rootP
  } else {
    // 子树等级相同，使用那个都行
    // uf.parent[rootP]  = rootQ
    // uf.parent[rootQ]  = rootP
    uf.parent[rootQ] = rootP
    uf.rank[rootP]++
  }
  // 集合个数减少一个
  uf.nComponents--
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,9),L=n("li",null,"核心思想为树，查找根节点",-1),S={href:"https://book.douban.com/subject/27044219/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/sona0402/go-study/blob/dev/ch06/intset/intset.go",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"参考材料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考材料","aria-hidden":"true"},"#"),s(" 参考材料")],-1),C={href:"https://algs4.cs.princeton.edu/15uf/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://book.douban.com/subject/20432061/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://book.douban.com/subject/27044219/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://web.stanford.edu/class/cs97si/03-data-structures.pdf",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.youtube.com/watch?v=RBSGKlAvoiM",target:"_blank",rel:"noopener noreferrer"};function N(W,M){const a=i("ExternalLinkIcon");return o(),c("div",null,[v,n("ol",null,[m,n("li",null,[n("a",b,[s("Quick-find"),e(a)]),s("，在查找时候直接返回"),h])]),g,n("ol",null,[f,n("li",null,[n("a",w,[s("Quick-union"),e(a)])])]),y,n("ol",null,[_,n("li",null,[n("a",x,[s("代码"),e(a)]),s("实现")])]),j,n("ul",null,[n("li",null,[s("下载"),n("a",F,[s("算法4 jar包"),e(a)]),n("ul",null,[n("li",null,[n("a",Q,[s("UF"),e(a)])])])]),n("li",null,[n("a",P,[s("maven下载"),e(a)])])]),q,n("h3",U,[G,s(),n("a",I,[s("Go实现"),e(a)])]),z,n("ul",null,[L,n("li",null,[s("使用位运算也可以进行处理，例如"),n("a",S,[s("Go程序设计语言 6.5 位向量"),e(a)]),n("a",A,[s("代码"),e(a)])])]),E,n("ul",null,[n("li",null,[n("a",C,[s("《算法4》 Union-Find"),e(a)])]),n("li",null,[n("a",D,[s("《算法导论》 21章"),e(a)])]),n("li",null,[n("a",T,[s("《Go程序设计语言》 6.5 位向量"),e(a)])]),n("li",null,[n("a",V,[s("CS 97SI-Data Structures"),e(a)])]),n("li",null,[n("a",B,[s("Data Structures Easy to Advanced Course - Full Tutorial from a Google Engineer"),e(a)])])])])}const J=p(k,[["render",N],["__file","union-find-structure.html.vue"]]);export{J as default};
