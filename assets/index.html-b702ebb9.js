import{_ as o,V as i,W as c,Y as a,a1 as n,Z as s,a0 as t,F as p}from"./framework-e54e0297.js";const r="/assets/urlpermissoon-99320440.png",l="/assets/hasrole-2e5c55ac.png",d={},u=t('<h1 id="rbac" tabindex="-1"><a class="header-anchor" href="#rbac" aria-hidden="true">#</a> RBAC</h1><p>用户m和可操作功能n组合，会产生c(m,n)种可能，所以这里需要粘合层进行转接，业内也是这么做的。</p><ul><li>数据库表的crud对应用户操作，也是基于角色分配和控制的。</li><li>flowable也是m元素配置时可以连接或者后续可以连接用户。</li></ul><p>角色就是中间层，关于用户-角色-操作具体操作后续讲解数据库设计的时候在进行讲解。 后续主要讲解关于操作相关。</p><h2 id="接口权限" tabindex="-1"><a class="header-anchor" href="#接口权限" aria-hidden="true">#</a> 接口权限</h2><p>作为赏金猎人帮助朋友维护系统时，发现某系统权限URL被拆分出来单独对待，并放在某一个模块下。如下图所示：</p><p><img src="'+r+'" alt="An image"></p><p>让我们思考一个问题，那就是开发人员看到密密麻麻的接口能配置正确吗？如果不能的话，如何能保证运营管理员配置正确？</p><h2 id="推导" tabindex="-1"><a class="header-anchor" href="#推导" aria-hidden="true">#</a> 推导</h2>',9),h={href:"https://ruoyi.vip/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://eladmin.vip/demo/#/dashboard",target:"_blank",rel:"noopener noreferrer"},_={href:"http://demo.diboot.com/user/login",target:"_blank",rel:"noopener noreferrer"},k=a("p",null,[a("img",{src:l,alt:"An image"})],-1),b={href:"https://eladmin.vip/pages/010202/#%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"Spring Security",-1),g=a("code",null,"Spring EL",-1),f=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Log</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;修改菜单&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/menus&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">&quot;hasAnyRole(&#39;admin&#39;,&#39;menu:edit&#39;)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Menu</span> resources<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>为什么要思考<code>rbac</code>，为什么要去看这些脚手架，在之前相关功能都由其他同进行负责，现在作为赏金猎人存在，需要更多的考虑如何快速的从<code>0～1</code>搭建项目，如何找到稳定的脚手架。 朋友买的项目因为开发了很多功能，迁移又迁移不动，维护成本又高，系统安全问题还多。 建议大家如果精力不多的话一定要使用知名度高的开源框架，如果公司比较大，就可以自定义开发了，因为开源知名度高的软件也是被查找漏洞的目标对象。 后续讲解下<code>rbac + flowable</code>下产生的业务难题。</p>`,3);function x(E,q){const e=p("ExternalLinkIcon");return i(),c("div",null,[u,a("p",null,[n("孤立URL是没有意义的，用户关心的就是页面、按钮，不会关心接口，在此基础上进行思考是不是URL应该挂在页面或者按钮级别。 来看开源框架，例如"),a("a",h,[n("ruoyi"),s(e)]),n("、"),a("a",m,[n("eladmin"),s(e)]),n("、"),a("a",_,[n("diboot"),s(e)]),n("等都是基于页面和按钮进行配置的。如图所示：")]),k,a("p",null,[n("代码层面可以"),a("a",b,[n("参考eladmin官方文档"),s(e)]),n("，使用了"),v,n("中"),g,n("进行切面处理，可以让用户无需过多关注权限安全相关。参考代码如下：")]),f])}const L=o(d,[["render",x],["__file","index.html.vue"]]);export{L as default};
