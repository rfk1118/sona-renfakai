import{_ as r,V as c,W as d,Y as e,a1 as t,Z as a,a0 as n,F as i}from"./framework-e54e0297.js";const l="/assets/components-4de4964d.png",p="/assets/netty-git-history-1dc38464.jpg",h="/assets/commit-template-fe0c0fff.jpg",u="/assets/40-nettyapi-feb14034.jpg",m="/assets/41-nettyapi-216346e9.jpg",g="/assets/AbstractBootstrapConfig-8f9f26e8.jpg",_="/assets/issues-27411125.jpg",f="/assets/bootconfig-ce8224d0.jpg",v={},b=n('<h1 id="如何读源码" tabindex="-1"><a class="header-anchor" href="#如何读源码" aria-hidden="true">#</a> 如何读源码</h1><h2 id="为什么要会读源码" tabindex="-1"><a class="header-anchor" href="#为什么要会读源码" aria-hidden="true">#</a> 为什么要会读源码？</h2><ul><li>书上讲的都是理论知识，无法直接使用到项目中，空有理论知识，不能落地，学过的知识很快就忘记了；</li><li>视频里都是讲案例和部分源码，看过之后犹如沙子上画画，风一吹就没了；</li></ul><h2 id="查看官网" tabindex="-1"><a class="header-anchor" href="#查看官网" aria-hidden="true">#</a> 查看官网</h2>',4),k={href:"https://netty.io",target:"_blank",rel:"noopener noreferrer"},x=e("div",{style:{"text-align":"center"}},[e("p",null,[e("img",{src:l,alt:"An image"})])],-1),y={href:"https://netty.io",target:"_blank",rel:"noopener noreferrer"},B=n('<h2 id="为什么要看源码历史" tabindex="-1"><a class="header-anchor" href="#为什么要看源码历史" aria-hidden="true">#</a> 为什么要看源码历史？</h2><h3 id="为什么" tabindex="-1"><a class="header-anchor" href="#为什么" aria-hidden="true">#</a> 为什么？</h3><ul><li>根据提交历史记录拨丝抽茧找到代码核心底层逻辑；</li><li>根据历史提交追根溯源，知道代码为什么要这么写。</li></ul><h3 id="怎么做" tabindex="-1"><a class="header-anchor" href="#怎么做" aria-hidden="true">#</a> 怎么做？</h3><p>按照下面流程进行操作：</p>',5),A=e("h3",{id:"详细流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#详细流程","aria-hidden":"true"},"#"),t(" 详细流程")],-1),J={href:"https://github.com/netty/netty",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"git clone",-1),L=e("code",null,"IDE",-1),N=n('<div style="text-align:center;"><p><img src="'+p+'" alt="An image"></p></div><p>每个提交点都提交了什么东西呢？</p><p><img src="'+h+'" alt="An image"></p><h3 id="如何使用历史提交记录呢" tabindex="-1"><a class="header-anchor" href="#如何使用历史提交记录呢" aria-hidden="true">#</a> 如何使用历史提交记录呢？</h3><p>如何看明白一段或者一行代码呢？其主流程如下：</p>',5),U=n('<h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h4><p>以<code>Netty AbstractBootstrapConfig</code>为例查看为什么它会出现？让我们对比 4.0 版本和 4.1 版本<code>io.netty.bootstrap</code>包的区别。</p><div style="text-align:center;"><p><img src="'+u+'" alt="An image"><img src="'+m+'" alt="An image"></p></div><p>对比发现 4.1 版本的包比 4.0 版本的包多了<code>BootstrapConfig</code>，为什么会出现这个类呢？不用多想肯定是有需求才会有产生这样变化。需求是什么呢？打开<code>AbstractBootstrapConfig</code>查看这个代码的提交点。</p><p><img src="'+g+`" alt="An image"></p><p>查看提交点<code>Git template</code>提交了什么信息？</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>暴露Bootstrap数据数据获取方法
<span class="token punctuation">[</span><span class="token comment">#5174] Expose Bootstrap getter methods and add some additional ones</span>

动机<span class="token punctuation">:</span>因为Bootstrap暴露的获取数量的方法过少
<span class="token key atrule">Motivation</span><span class="token punctuation">:</span>  The Bootstrap class (applies also to AbstractBootstrap and ServerBootstrap) has a few package private getter methods and some things such as <span class="token comment">#attr() and #options() aren&#39;t exposed at all.</span>
变更<span class="token punctuation">:</span>使用更安全的管理方式暴露配置数据
<span class="token key atrule">Modifications</span><span class="token punctuation">:</span>  Expose &quot;getters&quot; for configured things in a safe<span class="token punctuation">-</span>manner via the config() method.
结果<span class="token punctuation">:</span>更简单的检查配置好的启动程序
<span class="token key atrule">Result</span><span class="token punctuation">:</span>  Easier for the user to check what is configured for a Bootstrap/ServerBootstrap.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),E={href:"https://github.com/netty/netty/issues/5174",target:"_blank",rel:"noopener noreferrer"},j=n('<div style="text-align:center;"><p><img src="'+_+'" alt="An image"></p></div><p>在 3 处输入 5174，就可以看到结果。</p><div style="text-align:center;"><p><img src="'+f+'" alt="An image"></p></div><p>译文：我们的程序使用 <code>Java</code> 开发，但是我们用<code>Clojure</code>代替了普通配置文件，但是我们无法测试远程地址是否未配置，这时候我们就理解了<code>AbstractBootstrapConfig</code>为什么会出现以及它的职责。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>使用上述方式可以快速查看代码历史背景和需求推动；</li><li><code>Netty</code>很值得学习的一点就是关于背景、动机、结果描述的很清晰，让后面参与的维护者可以通过 <code>Git</code> 提交记录感知到历史上下文，降低口口传递成本。</li></ul>',6);function T(V,W){const s=i("ExternalLinkIcon"),o=i("Mermaid");return c(),d("div",null,[b,e("p",null,[t("打开"),e("a",k,[t("官网"),a(s)]),t("，查看架构设计，这一步很重要，其可以快速了解项目设计理念和应用。")]),x,e("p",null,[e("a",y,[t("Netty"),a(s)]),t(" 是一款异步事件驱动的网络应用程序框架，支持快速地开发可维护的、高性能的、面向协议的服务器和客户端。")]),B,a(o,{id:"mermaid-56",code:"eJxLy8kvT85ILCpR8AniUgACR42nrd0vZ7U92b34+YJGTQVdXTsFJ41n85c+n9P9rH/Ck11Lnva1Pe3fpAlW7QSWd4bKu2eWKCTn5+YCqZLU3IKcxJJUTS4ANpUpuQ=="}),A,e("p",null,[t("打开"),e("a",J,[t("netty github"),a(s)]),t("，找到仓库地址，"),C,t("或者"),L,t("拉取代码，查看 Git 提交历史，这个东西到底该怎么用呢？")]),N,a(o,{id:"mermaid-80",code:"eJxLy8kvT85ILCpR8AniUgACR41n85c+n9P9bP6EJztWPd+4+1nHtBcNrUDui4U9T3Yvfr6gUVNBV9dOwUnjWee+px0bnvVPeLJryfOmnZpg/U5gSWeoKe6ZJQrJ+bm5QKokNbcgJ7EkFaLMGazMRQOkILO4uDS1WOHZlJ1Pu1a8aO55NnM9RJELWJGrBsRaiLwmFwBtd1BK"}),U,e("p",null,[t("产生这次变动的"),e("a",E,[t("动机"),a(s)]),t("是什么？")]),j])}const S=r(v,[["render",T],["__file","read-source.html.vue"]]);export{S as default};
