import{_ as n,V as s,W as a,a0 as e}from"./framework-1bd9c91b.js";const t={},o=e(`<h1 id="chooserfactory" tabindex="-1"><a class="header-anchor" href="#chooserfactory" aria-hidden="true">#</a> ChooserFactory</h1><h3 id="chooserfactory-是什么" tabindex="-1"><a class="header-anchor" href="#chooserfactory-是什么" aria-hidden="true">#</a> ChooserFactory 是什么？</h3><p>从线程池中选择线程的计算方式，可以让用户自定义算法选择下一个线程，更灵活的 Api。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里应该说时选择 eventloop 更合适，因为任务都是加到 eventloop 的 queue 里面，然后由 eventloop 自己拉取任务进行处理。</p></div><p>Allow to specify a custom EventExecutorChooserFactory. Related to [#1230]</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">interface</span> <span class="token class-name">EventExecutorChooser</span> <span class="token punctuation">{</span>

        <span class="token doc-comment comment">/**
         * Returns the new <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">EventExecutor</span></span><span class="token punctuation">}</span> to use.
         */</span>
        <span class="token class-name">EventExecutor</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span>executors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 是2的n次幂，使用&amp;进行计算更高效</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PowerOfTwoEventExecutorChooser</span><span class="token punctuation">(</span>executors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 使用除法进行计算</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GenericEventExecutorChooser</span><span class="token punctuation">(</span>executors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="poweroftwoeventexecutorchooser" tabindex="-1"><a class="header-anchor" href="#poweroftwoeventexecutorchooser" aria-hidden="true">#</a> PowerOfTwoEventExecutorChooser</h3><p>计算性能更高效，2 的 n 次幂，使用&amp;进行计算更高效</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PowerOfTwoEventExecutorChooser</span> <span class="token keyword">implements</span> <span class="token class-name">EventExecutorChooser</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> idx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EventExecutor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> executors<span class="token punctuation">;</span>

        <span class="token class-name">PowerOfTwoEventExecutorChooser</span><span class="token punctuation">(</span><span class="token class-name">EventExecutor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> executors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>executors <span class="token operator">=</span> executors<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">EventExecutor</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> executors<span class="token punctuation">[</span>idx<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> executors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="genericeventexecutorchooser" tabindex="-1"><a class="header-anchor" href="#genericeventexecutorchooser" aria-hidden="true">#</a> GenericEventExecutorChooser</h3><p>更通用，使用除法进行计算。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">GenericEventExecutorChooser</span> <span class="token keyword">implements</span> <span class="token class-name">EventExecutorChooser</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> idx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EventExecutor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> executors<span class="token punctuation">;</span>

        <span class="token class-name">GenericEventExecutorChooser</span><span class="token punctuation">(</span><span class="token class-name">EventExecutor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> executors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>executors <span class="token operator">=</span> executors<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">EventExecutor</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> executors<span class="token punctuation">[</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>idx<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> executors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),p=[o];function c(l,i){return s(),a("div",null,p)}const r=n(t,[["render",c],["__file","chooser-factory.html.vue"]]);export{r as default};
