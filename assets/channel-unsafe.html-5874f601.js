import{_ as n,V as a,W as s,a0 as e}from"./framework-1bd9c91b.js";const t={},c=e(`<h1 id="channel-unsafe" tabindex="-1"><a class="header-anchor" href="#channel-unsafe" aria-hidden="true">#</a> Channel-Unsafe</h1><h3 id="unsafe-初始化" tabindex="-1"><a class="header-anchor" href="#unsafe-初始化" aria-hidden="true">#</a> Unsafe 初始化</h3><ol><li>Unsafe 的初始化都是在<code>Channel</code>初始化的时候进行初始化的，并且使用的是模版设计模式。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">AbstractChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
      id <span class="token operator">=</span> <span class="token function">newId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 这里会进行初始化</span>
      unsafe <span class="token operator">=</span> <span class="token function">newUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pipeline <span class="token operator">=</span> <span class="token function">newChannelPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">AbstractUnsafe</span> <span class="token function">newUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="abstractniomessagechannel" tabindex="-1"><a class="header-anchor" href="#abstractniomessagechannel" aria-hidden="true">#</a> AbstractNioMessageChannel</h3><ol><li><code>NioServerSocketChannel</code>其初始化时，<code>newUnsafe()</code>调用的是其父亲<code>AbstractNioMessageChannel</code>的 <code>newUnsafe()</code> 方法。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 只关心 SelectionKey.OP_ACCEPT事件</span>
    <span class="token comment">// 这里一直调用到AbstractChannel，然后AbstractChannel#newUnsafe在回调到AbstractNioMessageChannel</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> channel<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioServerSocketChannelConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// AbstractNioMessageChannel</span>
<span class="token keyword">protected</span> <span class="token class-name">AbstractNioUnsafe</span> <span class="token function">newUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NioMessageUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>AbstractNioMessageChannel#read()</code>方法会在<code>pipeline.fireChannelRead(readBuf.get(i));</code>中使用 <code>ServerBootstrapAcceptor</code> 产生 <code>NioSocketChannel</code> 。</li></ol><h3 id="abstractniobytechannel" tabindex="-1"><a class="header-anchor" href="#abstractniobytechannel" aria-hidden="true">#</a> AbstractNioByteChannel</h3><ol><li><code>NioSocketChannel</code>其初始化时，<code>newUnsafe()</code>调用的是其父亲<code>AbstractNioByteChannel</code>的 <code>newUnsafe()</code> 方法。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">AbstractNioByteChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> parent<span class="token punctuation">,</span> <span class="token class-name">SelectableChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 只关心 SelectionKey.OP_READ</span>
  <span class="token comment">// 这里一直调用到AbstractChannel，然后AbstractChannel#newUnsafe在回调到AbstractNioByteChannel</span>
   <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// AbstractNioByteChannel</span>
<span class="token keyword">protected</span> <span class="token class-name">AbstractNioUnsafe</span> <span class="token function">newUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NioByteUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>NioByteUnsafe</code>进行<code>read()</code>时候是进行数据处理。</li></ol><h3 id="为什么要拆分呢" tabindex="-1"><a class="header-anchor" href="#为什么要拆分呢" aria-hidden="true">#</a> 为什么要拆分呢？</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>Split AbstractNioChannel into two subtypes
<span class="token punctuation">-</span> AbstractNioMessageChannel and AbstractNioStreamChannel
<span class="token punctuation">-</span> Better performance
<span class="token punctuation">-</span> Replaced &#39;if&#39; checks with polymorphism
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>从上面看<code>AbstractNioChannel</code>用策略+模版设计模式进行处理主要是为了性能和扩展。</li></ol><h3 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> TIPS</h3><p>Unsafe operations that should never be called from user-code. These methods are only provided to implement the actual transport, and must be invoked from an I/O thread except for the following methods:</p><ul><li>localAddress()</li><li>remoteAddress()</li><li>closeForcibly()</li><li>register(EventLoop, ChannelPromise)</li><li>deregister(ChannelPromise)</li><li>voidPromise()</li></ul><p>除了上面的方法，不应该从用户代码中调用的不安全操作，这些方法仅用于实现实际传输，并且必须从 I/O 线程调用。</p>`,19),o=[c];function l(p,i){return a(),s("div",null,o)}const u=n(t,[["render",l],["__file","channel-unsafe.html.vue"]]);export{u as default};
