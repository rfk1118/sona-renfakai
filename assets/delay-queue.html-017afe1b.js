import{_ as p,V as t,W as o,Y as n,a1 as s,Z as l,a0 as a,F as c}from"./framework-1bd9c91b.js";const i={},r=a(`<h1 id="锁局部变量" tabindex="-1"><a class="header-anchor" href="#锁局部变量" aria-hidden="true">#</a> 锁局部变量</h1><p>为什么 Doug Lea 喜欢将不可变锁引用放到局部变量表中?</p><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2><p>本文章使用 <code>java.util.concurrent.DelayQueue</code> 为例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Delayed</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>
  <span class="token keyword">implements</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 其他代码暂时忽略......</span>
  <span class="token comment">// 仅仅这一段代码进行展示</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 成员变量内存地址存到局部变量表中</span>
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字节码优化" tabindex="-1"><a class="header-anchor" href="#字节码优化" aria-hidden="true">#</a> 字节码优化</h2><ol><li>编写 demo，减少字节码指令集，查看起来会简单一些</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">ReentrantLock</span> rt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rt<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            rt<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用编译器进行编译，查看未优化之前字节码。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 编译class</span>
<span class="token comment">// javac Queue.java</span>
<span class="token comment">// 查看字节码</span>
<span class="token comment">// javap -p -v Queue</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span>
<span class="token class-name">Code</span><span class="token operator">:</span>
  stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
    <span class="token number">0</span><span class="token operator">:</span> aload_0
    <span class="token number">1</span><span class="token operator">:</span> getfield      #<span class="token number">4</span>                  <span class="token comment">// Field rt:Ljava/util/concurrent/locks/ReentrantLock;</span>
    <span class="token number">4</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/util/concurrent/locks/ReentrantLock.lock:()V</span>
    <span class="token number">7</span><span class="token operator">:</span> getstatic     #<span class="token number">6</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
    <span class="token number">10</span><span class="token operator">:</span> iconst_1
    <span class="token number">11</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
    <span class="token number">14</span><span class="token operator">:</span> aload_0
    <span class="token number">15</span><span class="token operator">:</span> getfield      #<span class="token number">4</span>                  <span class="token comment">// Field rt:Ljava/util/concurrent/locks/ReentrantLock;</span>
    <span class="token number">18</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/util/concurrent/locks/ReentrantLock.unlock:()V</span>
    <span class="token number">21</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">34</span>
    <span class="token number">24</span><span class="token operator">:</span> astore_1
    <span class="token number">25</span><span class="token operator">:</span> aload_0
    <span class="token number">26</span><span class="token operator">:</span> getfield      #<span class="token number">4</span>                  <span class="token comment">// Field rt:Ljava/util/concurrent/locks/ReentrantLock;</span>
    <span class="token number">29</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/util/concurrent/locks/ReentrantLock.unlock:()V</span>
    <span class="token number">32</span><span class="token operator">:</span> aload_1
    <span class="token number">33</span><span class="token operator">:</span> athrow
    <span class="token number">34</span><span class="token operator">:</span> <span class="token keyword">return</span>
  <span class="token class-name">Exception</span> table<span class="token operator">:</span>
    from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type
        <span class="token number">7</span>    <span class="token number">14</span>    <span class="token number">24</span>   any
  <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
    line <span class="token number">15</span><span class="token operator">:</span> <span class="token number">0</span>
    line <span class="token number">17</span><span class="token operator">:</span> <span class="token number">7</span>
    line <span class="token number">19</span><span class="token operator">:</span> <span class="token number">14</span>
    line <span class="token number">20</span><span class="token operator">:</span> <span class="token number">21</span>
    line <span class="token number">19</span><span class="token operator">:</span> <span class="token number">24</span>
    line <span class="token number">20</span><span class="token operator">:</span> <span class="token number">32</span>
    line <span class="token number">21</span><span class="token operator">:</span> <span class="token number">34</span>
  <span class="token class-name">StackMapTable</span><span class="token operator">:</span> number_of_entries <span class="token operator">=</span> <span class="token number">2</span>
    frame_type <span class="token operator">=</span> <span class="token number">88</span> <span class="token comment">/* same_locals_1_stack_item */</span>
      stack <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Throwable</span> <span class="token punctuation">]</span>
    frame_type <span class="token operator">=</span> <span class="token number">9</span> <span class="token comment">/* same */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>从字节码可以看到每次获取锁的时候，都先从局部变量表里面获取<code>index=0 的 this</code>推入栈后，在获取锁，内容如下</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token number">0</span><span class="token operator">:</span> aload_0
  <span class="token number">1</span><span class="token operator">:</span> getfield      #<span class="token number">4</span>                  <span class="token comment">// Field rt:Ljava/util/concurrent/locks/ReentrantLock;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>修改代码，进行指令集优化</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">ReentrantLock</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">ReentrantLock</span> rt <span class="token operator">=</span> r<span class="token punctuation">;</span>
      rt<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
          rt<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>编译和反编译查看字节码</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
  flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span>
  <span class="token class-name">Code</span><span class="token operator">:</span>
    stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
        <span class="token number">0</span><span class="token operator">:</span> aload_0
        <span class="token number">1</span><span class="token operator">:</span> getfield      #<span class="token number">4</span>                  <span class="token comment">// Field r:Ljava/util/concurrent/locks/ReentrantLock;</span>
        <span class="token number">4</span><span class="token operator">:</span> astore_1
        <span class="token comment">// 获取到锁</span>
        <span class="token number">5</span><span class="token operator">:</span> aload_1
        <span class="token comment">// 将锁放到index = 1  局部变量表 locals</span>
        <span class="token number">6</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/util/concurrent/locks/ReentrantLock.lock:()V</span>
        <span class="token number">9</span><span class="token operator">:</span> getstatic     #<span class="token number">6</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">12</span><span class="token operator">:</span> iconst_1
      <span class="token number">13</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">16</span><span class="token operator">:</span> aload_1
      <span class="token number">17</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/util/concurrent/locks/ReentrantLock.unlock:()V</span>
      <span class="token number">20</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">30</span>
      <span class="token number">23</span><span class="token operator">:</span> astore_2
      <span class="token number">24</span><span class="token operator">:</span> aload_1
      <span class="token number">25</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/util/concurrent/locks/ReentrantLock.unlock:()V</span>
      <span class="token number">28</span><span class="token operator">:</span> aload_2
      <span class="token number">29</span><span class="token operator">:</span> athrow
      <span class="token number">30</span><span class="token operator">:</span> <span class="token keyword">return</span>
    <span class="token class-name">Exception</span> table<span class="token operator">:</span>
        from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type
            <span class="token number">9</span>    <span class="token number">16</span>    <span class="token number">23</span>   any
    <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
      line <span class="token number">14</span><span class="token operator">:</span> <span class="token number">0</span>
      line <span class="token number">15</span><span class="token operator">:</span> <span class="token number">5</span>
      line <span class="token number">17</span><span class="token operator">:</span> <span class="token number">9</span>
      line <span class="token number">19</span><span class="token operator">:</span> <span class="token number">16</span>
      line <span class="token number">20</span><span class="token operator">:</span> <span class="token number">20</span>
      line <span class="token number">19</span><span class="token operator">:</span> <span class="token number">23</span>
      line <span class="token number">20</span><span class="token operator">:</span> <span class="token number">28</span>
      line <span class="token number">21</span><span class="token operator">:</span> <span class="token number">30</span>
    <span class="token class-name">StackMapTable</span><span class="token operator">:</span> number_of_entries <span class="token operator">=</span> <span class="token number">2</span>
      frame_type <span class="token operator">=</span> <span class="token number">255</span> <span class="token comment">/* full_frame */</span>
        offset_delta <span class="token operator">=</span> <span class="token number">23</span>
        <span class="token comment">// index = 1 这里放了锁</span>
        locals <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">class</span> com<span class="token operator">/</span>example<span class="token operator">/</span>zk<span class="token operator">/</span><span class="token class-name">Queue</span><span class="token punctuation">,</span> <span class="token keyword">class</span> java<span class="token operator">/</span>util<span class="token operator">/</span>concurrent<span class="token operator">/</span>locks<span class="token operator">/</span><span class="token class-name">ReentrantLock</span> <span class="token punctuation">]</span>
        stack <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Throwable</span> <span class="token punctuation">]</span>
      frame_type <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment">/* same */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>这里发现指令集发生了变化，每次获取锁的时候都使用 <code>aload_1</code>从局部变量表里面获取，这里是 Doug lea 对指令集的优化。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>HiKariCP</code> 也是靠字节码优化提升速度的, 可自行查看源码。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token number">0</span><span class="token operator">:</span> aload_0
  <span class="token number">1</span><span class="token operator">:</span> getfield      #<span class="token number">4</span>                  <span class="token comment">// Field r:Ljava/util/concurrent/locks/ReentrantLock;</span>
  <span class="token number">4</span><span class="token operator">:</span> astore_1
  <span class="token comment">// 获取到锁</span>
  <span class="token number">5</span><span class="token operator">:</span> aload_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li><code>locals</code> 的变化，多占用了一个局部变量表。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">// 优化前</span>
  stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
  <span class="token comment">// 优化后</span>
  stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="猜想" tabindex="-1"><a class="header-anchor" href="#猜想" aria-hidden="true">#</a> 猜想</h3><h4 id="为何-doug-lea-会将锁在方法体内写为-final-而数据却未写为-final" tabindex="-1"><a class="header-anchor" href="#为何-doug-lea-会将锁在方法体内写为-final-而数据却未写为-final" aria-hidden="true">#</a> 为何 Doug Lea 会将锁在方法体内写为 final，而数据却未写为 final？</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">// 这里为什么会是final</span>
  <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
  lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里的q也是final的，为啥不放到局部变量表中</span>
      <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),u={href:"https://shipilev.net/jvm/anatomy-quarks/8-local-var-reachability/",target:"_blank",rel:"noopener noreferrer"},k=n("li",null,[n("p",null,[s("为何这里"),n("code",null,"private final PriorityQueue<E> q = new PriorityQueue<E>();"),s(" 也是 final 为啥不在局部变量也命名为 final, 原因"),n("code",null,"PriorityQueue"),s("不可变，但是其底层数据 "),n("code",null,"transient Object[] queue"),s(" 在扩容时候会变地址(数组特性)。")])],-1),d=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 对象地址不会变，但是内部数据汇编</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>
  <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7720805057305804111L</span><span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>

  <span class="token comment">// 这里内存地址会变</span>
  <span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue<span class="token punctuation">;</span> <span class="token comment">// non-private to simplify nested class access</span>
<span class="token punctuation">}</span>

<span class="token comment">// 内部数据不会变</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">7373984872572414699L</span><span class="token punctuation">;</span>
  <span class="token comment">// 不会改变内存地址</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><s>从这里猜，使用了 final 可能会减少线程缓存数据和主内存数据比较及拉取主内存数据到线程缓存中，也就是经典的内存模型。</s></li><li>《深入理解虚拟机》P365 中对下面两段代码进行了分析，并推断 final 对局部变量在运行期没影响。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 方法1带有final修饰</span>
<span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方法2没有final修饰</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="版权" tabindex="-1"><a class="header-anchor" href="#版权" aria-hidden="true">#</a> 版权</h2><p>著作权归作者所有，商业转载请联系作者获得授权，非商业转载请注明出处。</p>`,5);function m(v,b){const e=c("ExternalLinkIcon");return t(),o("div",null,[r,n("ul",null,[n("li",null,[n("p",null,[s("局部变量表重复利用问题，可以参考深入理解虚拟机或"),n("a",u,[s("JVM Anatomy Quark #8()"),l(e)]),s(" Google 查到如果局部变量为 final, 权限变成了 ReadOnly access, 为了防止局部向量嘈被重复利用问题。")])]),k]),d])}const w=p(i,[["render",m],["__file","delay-queue.html.vue"]]);export{w as default};
