const e=JSON.parse('{"key":"v-9f49a3ea","path":"/languages/java/jvm/SerialHeap.html","title":"SerialHeap","lang":"zh-CN","frontmatter":{"description":"SerialHeap 概念 SerialHeap 是用于 Serial GC 的 CollectedHeap 的实现。 堆在单个连续块中预先保留，分为两部分，新生代和老年代。新生代位于低地址，老年代位于高地址。代之间的边界地址是固定的。在一代内，已提交的内存向更高的地址增长。 从serialHeap.hpp可以看到以下注释，其中最大新生代分为eden、from、to区和老年代。 // SerialHeap is the implementation of CollectedHeap for Serial GC. // // The heap is reserved up-front in a single contiguous block, split into two // parts, the young and old generation. The young generation resides at lower // addresses, the old generation at higher addresses. The boundary address // between the generations is fixed. Within a generation, committed memory // grows towards higher addresses. // // // low high // // +-- generation boundary (fixed after startup) // | // |&lt;- young gen (reserved MaxNewSize) -&gt;|&lt;- old gen (reserved MaxOldSize) -&gt;| // +-----------------+--------+--------+--------+---------------+-------------------+ // | eden | from | to | | old | | // | | (to) | (from) | | | | // +-----------------+--------+--------+--------+---------------+-------------------+ // |&lt;- committed -&gt;| |&lt;- committed -&gt;| //","head":[["meta",{"property":"og:url","content":"https://renfakai.com/languages/java/jvm/SerialHeap.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"SerialHeap"}],["meta",{"property":"og:description","content":"SerialHeap 概念 SerialHeap 是用于 Serial GC 的 CollectedHeap 的实现。 堆在单个连续块中预先保留，分为两部分，新生代和老年代。新生代位于低地址，老年代位于高地址。代之间的边界地址是固定的。在一代内，已提交的内存向更高的地址增长。 从serialHeap.hpp可以看到以下注释，其中最大新生代分为eden、from、to区和老年代。 // SerialHeap is the implementation of CollectedHeap for Serial GC. // // The heap is reserved up-front in a single contiguous block, split into two // parts, the young and old generation. The young generation resides at lower // addresses, the old generation at higher addresses. The boundary address // between the generations is fixed. Within a generation, committed memory // grows towards higher addresses. // // // low high // // +-- generation boundary (fixed after startup) // | // |&lt;- young gen (reserved MaxNewSize) -&gt;|&lt;- old gen (reserved MaxOldSize) -&gt;| // +-----------------+--------+--------+--------+---------------+-------------------+ // | eden | from | to | | old | | // | | (to) | (from) | | | | // +-----------------+--------+--------+--------+---------------+-------------------+ // |&lt;- committed -&gt;| |&lt;- committed -&gt;| //"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://renfakai.com/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-25T01:50:38.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"SerialHeap"}],["meta",{"property":"article:modified_time","content":"2023-02-25T01:50:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SerialHeap\\",\\"image\\":[\\"https://renfakai.com/\\"],\\"dateModified\\":\\"2023-02-25T01:50:38.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"回收流程","slug":"回收流程","link":"#回收流程","children":[{"level":3,"title":"新生代收集","slug":"新生代收集","link":"#新生代收集","children":[]},{"level":3,"title":"老年代收集","slug":"老年代收集","link":"#老年代收集","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1677289838000,"updatedTime":1677289838000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":9.43,"words":2830},"filePathRelative":"languages/java/jvm/SerialHeap.md","localizedDate":"2023年2月25日","excerpt":"<h1> SerialHeap</h1>\\n<h2> 概念</h2>\\n<p><code>SerialHeap</code> 是用于 <code>Serial GC</code> 的 <code>CollectedHeap</code> 的实现。</p>\\n<p>堆在单个连续块中预先保留，分为两部分，新生代和老年代。新生代位于低地址，老年代位于高地址。代之间的边界地址是固定的。在一代内，已提交的内存向更高的地址增长。</p>\\n<p>从<code>serialHeap.hpp</code>可以看到以下注释，其中最大新生代分为<code>eden、from、to</code>区和老年代。</p>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">// SerialHeap is the implementation of CollectedHeap for Serial GC.</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">// The heap is reserved up-front in a single contiguous block, split into two</span>\\n<span class=\\"token comment\\">// parts, the young and old generation. The young generation resides at lower</span>\\n<span class=\\"token comment\\">// addresses, the old generation at higher addresses. The boundary address</span>\\n<span class=\\"token comment\\">// between the generations is fixed. Within a generation, committed memory</span>\\n<span class=\\"token comment\\">// grows towards higher addresses.</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">// low                                                                              high</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//                                              +-- generation boundary (fixed after startup)</span>\\n<span class=\\"token comment\\">//                                              |</span>\\n<span class=\\"token comment\\">// |&lt;-    young gen (reserved MaxNewSize)     -&gt;|&lt;- old gen (reserved MaxOldSize) -&gt;|</span>\\n<span class=\\"token comment\\">// +-----------------+--------+--------+--------+---------------+-------------------+</span>\\n<span class=\\"token comment\\">// |       eden      |  from  |   to   |        |      old      |                   |</span>\\n<span class=\\"token comment\\">// |                 |  (to)  | (from) |        |               |                   |</span>\\n<span class=\\"token comment\\">// +-----------------+--------+--------+--------+---------------+-------------------+</span>\\n<span class=\\"token comment\\">// |&lt;-          committed            -&gt;|        |&lt;- committed -&gt;|</span>\\n<span class=\\"token comment\\">//</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{e as data};
