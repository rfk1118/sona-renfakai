const n=JSON.parse('{"key":"v-3274da43","path":"/basic-skill/algorithms/sort/insert-sort.html","title":"插入排序","lang":"zh-CN","frontmatter":{"description":"插入排序 概念 “插入排序”不断地待排序（第i个元素）元素交换到[0，i]合适位置。实现主要包含两种： 从后向前顺序比较 从前向后顺序比较 代码 从后向前顺序比较代码： func insertSort(num []int) []int { // 总长度 length := len(num) // 不能从0开始因为第一个元素要跟0对比 for i := 1; i &lt; length; i++ { // 从当前元素查找，如果前面元素大于当前元素，进行交换 for j := i; j &gt; 0 &amp;&amp; num[j] &lt; num[j-1]; j-- { num[j] = num[j] ^ num[j-1] num[j-1] = num[j] ^ num[j-1] num[j] = num[j] ^ num[j-1] } } return num }","head":[["meta",{"property":"og:url","content":"https://renfakai.com/basic-skill/algorithms/sort/insert-sort.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"插入排序"}],["meta",{"property":"og:description","content":"插入排序 概念 “插入排序”不断地待排序（第i个元素）元素交换到[0，i]合适位置。实现主要包含两种： 从后向前顺序比较 从前向后顺序比较 代码 从后向前顺序比较代码： func insertSort(num []int) []int { // 总长度 length := len(num) // 不能从0开始因为第一个元素要跟0对比 for i := 1; i &lt; length; i++ { // 从当前元素查找，如果前面元素大于当前元素，进行交换 for j := i; j &gt; 0 &amp;&amp; num[j] &lt; num[j-1]; j-- { num[j] = num[j] ^ num[j-1] num[j-1] = num[j] ^ num[j-1] num[j] = num[j] ^ num[j-1] } } return num }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-22T04:33:27.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-22T04:33:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"插入排序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-22T04:33:27.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":2,"title":"优化","slug":"优化","link":"#优化","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1692678807000,"updatedTime":1692678807000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":1.12,"words":335},"filePathRelative":"basic-skill/algorithms/sort/insert-sort.md","localizedDate":"2023年8月22日","excerpt":"<h1> 插入排序</h1>\\n<h2> 概念</h2>\\n<p>“插入排序”不断地待排序（第i个元素）元素交换到<code>[0，i]</code>合适位置。实现主要包含两种：</p>\\n<ol>\\n<li>从后向前顺序比较</li>\\n<li>从前向后顺序比较</li>\\n</ol>\\n<h2> 代码</h2>\\n<p>从后向前顺序比较代码：</p>\\n<div class=\\"language-Go line-numbers-mode\\" data-ext=\\"Go\\"><pre class=\\"language-Go\\"><code>func insertSort(num []int) []int {\\n  // 总长度\\n  length := len(num)\\n  // 不能从0开始因为第一个元素要跟0对比\\n  for i := 1; i &lt; length; i++ {\\n    //  从当前元素查找，如果前面元素大于当前元素，进行交换\\n    for j := i; j &gt; 0 &amp;&amp; num[j] &lt; num[j-1]; j-- {\\n      num[j] = num[j] ^ num[j-1]\\n      num[j-1] = num[j] ^ num[j-1]\\n      num[j] = num[j] ^ num[j-1]\\n    }\\n  }\\n  return num\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{n as data};
