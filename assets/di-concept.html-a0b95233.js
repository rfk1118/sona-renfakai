import{_ as o,V as c,W as p,X as l,Y as n,Z as e,$ as t,a1 as a,a0 as i,F as u}from"./framework-e54e0297.js";const d={},r=i(`<h1 id="di概念" tabindex="-1"><a class="header-anchor" href="#di概念" aria-hidden="true">#</a> DI概念</h1><p><code>DI</code> 依赖反转是一种思想，无论 <code>is-a</code> 、 <code>has-a</code> 都会使用面向接口编程，接口实现后续如果有替换，如果没有 <code>DI</code> ，每次变更都需要修改多处代码，所以DI重要性就显得极其重要。</p><p>了解 <code>DI</code> 需要了解 <code>bean</code> 的生命周期，构造器注入、填充属性也就是 <code>DI</code> 依赖注入，在依赖注入时需要对对象进行查找，所以在设计时需要 <code>Context</code> 查找特定的 <code>bean</code> 。</p><h2 id="为什么要有di" tabindex="-1"><a class="header-anchor" href="#为什么要有di" aria-hidden="true">#</a> 为什么要有DI</h2><p>如果没有 <code>DI</code> ，项目中在特定的位置就会出现下面的代码，后续需要修改默认策略怎么办？改代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这里需要改</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">RejectedExecutionHandler</span> defaultHandler <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>
                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>
                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>
                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>
                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>
                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>
          <span class="token comment">// 这里需要改defaultHandler</span>
          threadFactory<span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果代码在项目中被引用的位置很多怎么办？向 <code>Spring</code> 学习，不直接 <code>new</code> ，而是封装到一个方法中，修改范围更小。其实我们使用日志文件门面 <code>SLF4J</code> 也是相同原理，做到可插拔。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> expectedSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>expectedSize <span class="token operator">/</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),k=n("h2",{id:"di核心理论",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#di核心理论","aria-hidden":"true"},"#"),a(" DI核心理论")],-1),m=n("li",null,"Bean在多线程下是否有副作用，这里引申出bean的作用域；",-1),v=n("li",null,"xml",-1),h=n("li",null,"注解",-1),_=n("li",null,"泛型",-1);function b(w,g){const s=u("RouterLink");return c(),p("div",null,[r,l(` ## 常用组件

* Core 核心包
* Beans
* Context
* Expression
* Context Support `),k,n("ol",null,[n("li",null,[e(s,{to:"/framework/spring/di.html"},{default:t(()=>[a("Bean填充属性")]),_:1}),a("，也就是DI核心基础，DI前置条件是里氏替换；")]),m,n("li",null,[a("元信息标签； "),n("ol",null,[v,h,n("li",null,[e(s,{to:"/framework/spring/initialize-bean.html"},{default:t(()=>[a("接口")]),_:1})]),_])])])])}const f=o(d,[["render",b],["__file","di-concept.html.vue"]]);export{f as default};
