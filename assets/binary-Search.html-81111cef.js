import{_ as n,V as s,W as a,$ as e}from"./framework-fd210779.js";const t={},p=e(`<h1 id="二分查找法" tabindex="-1"><a class="header-anchor" href="#二分查找法" aria-hidden="true">#</a> 二分查找法</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>有序数组默认使用正序</p></div><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><ol><li>查看数组的中间数据项，如果相等返回位置</li><li>如果数据项大于查找数据，缩小范围，从数组前半部分查找</li><li>如果数据项小于查找数据，缩小范围，从数组后半部分查找</li><li>继续查找到范围为0，如果还未找到返回一个负值</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>代码参考 <code>Arrays#binarySearch()</code></p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch0</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">,</span>
                                    <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 开始位置</span>
      <span class="token keyword">int</span> low <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span>
      <span class="token comment">// 结束位置</span>
      <span class="token keyword">int</span> high <span class="token operator">=</span> toIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

      <span class="token comment">// 没有查找完</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 找到中间节点</span>
          <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token comment">// 中间节点的值</span>
          <span class="token keyword">int</span> midVal <span class="token operator">=</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token comment">// 如果中间值小于查找值</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>midVal <span class="token operator">&lt;</span> key<span class="token punctuation">)</span>
              <span class="token comment">// 数据项小于查找数组，缩小范围，从数组后半部分查找</span>
              low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>midVal <span class="token operator">&gt;</span> key<span class="token punctuation">)</span>
              <span class="token comment">// 数据项大于查找数组，缩小范围，从数组前半部分查找</span>
              high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">else</span>
              <span class="token comment">// 数组的中间数据项，如果相等返回位置，</span>
              <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment">// key found</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// key not found.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>时间复杂度为O(logN)</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>需要连续内存空间</li><li>数组需要有序</li></ul>`,12),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","binary-Search.html.vue"]]);export{d as default};
