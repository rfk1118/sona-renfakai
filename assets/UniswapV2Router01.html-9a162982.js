import{_ as o,V as e,W as c,Y as n,a1 as s,Z as t,a0 as p,F as u}from"./framework-e54e0297.js";const i={},l=n("h1",{id:"uniswapv2router01",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uniswapv2router01","aria-hidden":"true"},"#"),s(" UniswapV2Router01")],-1),k=n("p",null,"由于需要暂时只解读swap部分。关于流动性部分后续有需要时候在读取源码，这样更加节省精力。",-1),r={href:"https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router01.sol",target:"_blank",rel:"noopener noreferrer"},d=p(`<h2 id="swapexacttokensfortokens" tabindex="-1"><a class="header-anchor" href="#swapexacttokensfortokens" aria-hidden="true">#</a> swapExactTokensForTokens</h2><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">swapExactTokensForTokens</span><span class="token punctuation">(</span>
    <span class="token builtin">uint</span> amountIn<span class="token punctuation">,</span>
    <span class="token builtin">uint</span> amountOutMin<span class="token punctuation">,</span>
    <span class="token builtin">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> path<span class="token punctuation">,</span>
    <span class="token builtin">address</span> to<span class="token punctuation">,</span>
    <span class="token builtin">uint</span> deadline
<span class="token punctuation">)</span> <span class="token keyword">external</span> override <span class="token function">ensure</span><span class="token punctuation">(</span>deadline<span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> amounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据输入的数据获取到输出量</span>
    amounts <span class="token operator">=</span> UniswapV2Library<span class="token punctuation">.</span><span class="token function">getAmountsOut</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> amountIn<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 保证获取的数量必须大于amountOutMin，如果想要防夹子，这里滑点要设定比较小</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>amounts<span class="token punctuation">[</span>amounts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> amountOutMin<span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 传输代币给某个池子</span>
    TransferHelper<span class="token punctuation">.</span><span class="token function">safeTransferFrom</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> UniswapV2Library<span class="token punctuation">.</span><span class="token function">pairFor</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 换取代币</span>
    <span class="token function">_swap</span><span class="token punctuation">(</span>amounts<span class="token punctuation">,</span> path<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getamountsout" tabindex="-1"><a class="header-anchor" href="#getamountsout" aria-hidden="true">#</a> getAmountsOut</h2>`,3),m={href:"https://github.com/Uniswap/v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>算法需要看白皮书。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// performs chained getAmountOut calculations on any number of pairs</span>
<span class="token keyword">function</span> <span class="token function">getAmountsOut</span><span class="token punctuation">(</span><span class="token builtin">address</span> factory<span class="token punctuation">,</span> <span class="token builtin">uint</span> amountIn<span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> path<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> amounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2Library: INVALID_PATH&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    amounts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    amounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> amountIn<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token builtin">uint</span> reserveIn<span class="token punctuation">,</span> <span class="token builtin">uint</span> reserveOut<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getReserves</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        amounts<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getAmountOut</span><span class="token punctuation">(</span>amounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> reserveIn<span class="token punctuation">,</span> reserveOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 算法</span>
<span class="token keyword">function</span> <span class="token function">getAmountOut</span><span class="token punctuation">(</span><span class="token builtin">uint</span> amountIn<span class="token punctuation">,</span> <span class="token builtin">uint</span> reserveIn<span class="token punctuation">,</span> <span class="token builtin">uint</span> reserveOut<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> amountOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>amountIn <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>reserveIn <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> reserveOut <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">uint</span> amountInWithFee <span class="token operator">=</span> amountIn<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">997</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">uint</span> numerator <span class="token operator">=</span> amountInWithFee<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>reserveOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">uint</span> denominator <span class="token operator">=</span> reserveIn<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>amountInWithFee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    amountOut <span class="token operator">=</span> numerator <span class="token operator">/</span> denominator<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pairfor" tabindex="-1"><a class="header-anchor" href="#pairfor" aria-hidden="true">#</a> pairFor</h2><p>根据两个代币排序计算出池子地址</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code>    <span class="token comment">// 根据两个代币排序计算出池子地址</span>
    <span class="token comment">// calculates the CREATE2 address for a pair without making any external calls</span>
    <span class="token keyword">function</span> <span class="token function">pairFor</span><span class="token punctuation">(</span><span class="token builtin">address</span> factory<span class="token punctuation">,</span> <span class="token builtin">address</span> tokenA<span class="token punctuation">,</span> <span class="token builtin">address</span> tokenB<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span> pair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token builtin">address</span> token0<span class="token punctuation">,</span> <span class="token builtin">address</span> token1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">sortTokens</span><span class="token punctuation">(</span>tokenA<span class="token punctuation">,</span> tokenB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pair <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>
                hex<span class="token string">&#39;ff&#39;</span><span class="token punctuation">,</span>
                factory<span class="token punctuation">,</span>
                <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>token0<span class="token punctuation">,</span> token1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                hex<span class="token string">&#39;96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f&#39;</span> <span class="token comment">// init code hash</span>
            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="swap" tabindex="-1"><a class="header-anchor" href="#swap" aria-hidden="true">#</a> _swap</h2><p>根据路径进行代币置换</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code>  <span class="token comment">// **** SWAP ****</span>
  <span class="token comment">// requires the initial amount to have already been sent to the first pair</span>
  <span class="token keyword">function</span> <span class="token function">_swap</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> amounts<span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> path<span class="token punctuation">,</span> <span class="token builtin">address</span> _to<span class="token punctuation">)</span> <span class="token keyword">internal</span> virtual <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 获取path , in和out</span>
          <span class="token punctuation">(</span><span class="token builtin">address</span> input<span class="token punctuation">,</span> <span class="token builtin">address</span> output<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 排序后</span>
          <span class="token punctuation">(</span><span class="token builtin">address</span> token0<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> UniswapV2Library<span class="token punctuation">.</span><span class="token function">sortTokens</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token builtin">uint</span> amountOut <span class="token operator">=</span> amounts<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token punctuation">(</span><span class="token builtin">uint</span> amount0Out<span class="token punctuation">,</span> <span class="token builtin">uint</span> amount1Out<span class="token punctuation">)</span> <span class="token operator">=</span> input <span class="token operator">==</span> token0 <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amountOut<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>amountOut<span class="token punctuation">,</span> <span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token builtin">address</span> to <span class="token operator">=</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">?</span> UniswapV2Library<span class="token punctuation">.</span><span class="token function">pairFor</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> output<span class="token punctuation">,</span> path<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> _to<span class="token punctuation">;</span>
          <span class="token comment">// 地址换取</span>
          <span class="token function">IUniswapV2Pair</span><span class="token punctuation">(</span>UniswapV2Library<span class="token punctuation">.</span><span class="token function">pairFor</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>
              amount0Out<span class="token punctuation">,</span> amount1Out<span class="token punctuation">,</span> to<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">bytes</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试地址" tabindex="-1"><a class="header-anchor" href="#测试地址" aria-hidden="true">#</a> 测试地址</h2>`,9),v={href:"https://www.geckoterminal.com/goerli-testnet/pools/0xc582d2e930c121742d8fcb55e6be4c6477c67dbe",target:"_blank",rel:"noopener noreferrer"};function h(f,y){const a=u("ExternalLinkIcon");return e(),c("div",null,[l,k,n("p",null,[n("a",r,[s("源码地址"),t(a)])]),d,n("p",null,[n("a",m,[s("源码地址"),t(a)])]),b,n("p",null,[n("a",v,[s("代币池子测试地址"),t(a)])])])}const g=o(i,[["render",h],["__file","UniswapV2Router01.html.vue"]]);export{g as default};
