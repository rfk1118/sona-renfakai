const t=JSON.parse('{"key":"v-25e3e3f9","path":"/basic-skill/design-pattern/structure/decorator/concept.html","title":"概念","lang":"zh-CN","frontmatter":{"description":"概念 概念 装饰器模式允许用户在不改变现有对象结构的情况下向其添加新功能。这种类型的设计模式属于结构化模式，因为这种模式充当现有类的包装器。 不改变现有对象结构 添加新功能 Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class. 创建一个装饰类包装原始类，其提供了一个增强功能，并对原函数签名协议没有修改 wraps the original class 增强功能并不修改协议 This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact.","head":[["meta",{"property":"og:url","content":"https://renfakai.com/basic-skill/design-pattern/structure/decorator/concept.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"概念"}],["meta",{"property":"og:description","content":"概念 概念 装饰器模式允许用户在不改变现有对象结构的情况下向其添加新功能。这种类型的设计模式属于结构化模式，因为这种模式充当现有类的包装器。 不改变现有对象结构 添加新功能 Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class. 创建一个装饰类包装原始类，其提供了一个增强功能，并对原函数签名协议没有修改 wraps the original class 增强功能并不修改协议 This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-27T09:17:03.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-27T09:17:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-27T09:17:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":3,"title":"Demo","slug":"demo","link":"#demo","children":[]},{"level":3,"title":"Implementation","slug":"implementation","link":"#implementation","children":[]}],"git":{"createdTime":1677489423000,"updatedTime":1677489423000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":1.48,"words":443},"filePathRelative":"basic-skill/design-pattern/structure/decorator/concept.md","localizedDate":"2023年2月27日","excerpt":"<h1> 概念</h1>\\n<h3> <a href=\\"https://www.tutorialspoint.com/design_pattern/decorator_pattern.htm\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">概念</a></h3>\\n<ul>\\n<li>装饰器模式允许用户在不改变现有对象结构的情况下向其添加新功能。这种类型的设计模式属于结构化模式，因为这种模式充当现有类的包装器。\\n<ul>\\n<li>不改变现有对象结构</li>\\n<li>添加新功能</li>\\n</ul>\\n</li>\\n<li>Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.</li>\\n<li>创建一个装饰类包装原始类，其提供了一个增强功能，并对原函数签名协议没有修改\\n<ul>\\n<li>wraps the original class</li>\\n<li>增强功能并不修改协议</li>\\n</ul>\\n</li>\\n<li>This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact.</li>\\n</ul>","copyright":{},"autoDesc":true}');export{t as data};
