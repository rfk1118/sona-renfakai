import{_ as e,V as p,W as o,Y as n,a1 as s,Z as t,a0 as c,F as i}from"./framework-e54e0297.js";const l="/assets/jsonAbi-555ad500.png",u="/assets/Formats-f9575a65.png",r={},d=n("h1",{id:"human-readable-abi",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#human-readable-abi","aria-hidden":"true"},"#"),s(" Human-Readable ABI")],-1),k=n("code",null,"npx hardhat compile",-1),v={href:"https://dev.to/anjana_j/how-to-convert-solidity-json-abi-to-human-readable-abi-in-hardhat-21mj",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,[n("img",{src:l,alt:"An image"})],-1),b=n("code",null,"ethers",-1),h={href:"https://docs.ethers.org/v5/api/utils/abi/formats/",target:"_blank",rel:"noopener noreferrer"},f=c('<p><img src="'+u+`" alt="An image"></p><h2 id="进行转换" tabindex="-1"><a class="header-anchor" href="#进行转换" aria-hidden="true">#</a> 进行转换</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ethers&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> jsonAbi <span class="token operator">=</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;../artifacts-zk/contracts/IL2Weth.sol/IL2Weth.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>abi<span class="token punctuation">;</span>
    <span class="token keyword">const</span> iface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span>jsonAbi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iface<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>FormatTypes<span class="token punctuation">.</span>full<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行脚本<code>npx hardhat run ./scripts/convert-abi.ts</code>，输出结果为：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>[
  &#39;event Initialize(string name, string symbol, uint8 decimals)&#39;,
  &#39;function allowance(address owner, address spender) view returns (uint256)&#39;,
  &#39;function approve(address spender, uint256 value) returns (bool)&#39;,
  &#39;function balanceOf(address account) view returns (uint256)&#39;,
  &#39;function deposit() payable&#39;,
  &#39;function depositTo(address _to) payable&#39;,
  &#39;function withdraw(uint256 _amount)&#39;,
  &#39;function withdrawTo(address _to, uint256 _amount)&#39;
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将打印ABI粘贴到代码中，然后删除无用的<code>ABI</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BigNumber<span class="token punctuation">,</span> Wallet<span class="token punctuation">,</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ethers&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> abi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;function approve(address spender, uint256 value) returns (bool)&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">approveToken</span><span class="token punctuation">(</span>
    wallet<span class="token operator">:</span> Wallet<span class="token punctuation">,</span>
    tokenAddress<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    spender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    approveValue<span class="token operator">:</span> BigNumber
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> tokenContract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span><span class="token function">Contract</span><span class="token punctuation">(</span>tokenAddress<span class="token punctuation">,</span> abi<span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> txApprove <span class="token operator">=</span> <span class="token keyword">await</span> tokenContract<span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span>spender<span class="token punctuation">,</span> approveValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> txApprove<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> approveToken<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>使用人类可读abi可以删除无用提高效率。</li><li>知道当前脚本调用了那些abi。</li></ul>`,9);function _(w,g){const a=i("ExternalLinkIcon");return p(),o("div",null,[d,n("p",null,[s("进行开发时，一般使用"),k,s("后导入Abi，但是不够直观，正好找到一篇"),n("a",v,[s("文章"),t(a)]),s("，这也算开发中小技巧，这里进行记录。")]),m,n("p",null,[s("来看下"),b,s("支持的几种格式"),n("a",h,[s("ABI Formats"),t(a)])]),f])}const x=e(r,[["render",_],["__file","convert-abi.html.vue"]]);export{x as default};
