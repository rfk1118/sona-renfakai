import{_ as n,V as s,W as a,a0 as t}from"./framework-e54e0297.js";const p={},e=t(`<h1 id="iuniswapv2factory" tabindex="-1"><a class="header-anchor" href="#iuniswapv2factory" aria-hidden="true">#</a> IUniswapV2Factory</h1><p>工厂设计模式中开发中最常用的设计模式方一。</p><ol><li>工厂方法按照模版创建。</li><li>设置收费账户，这里主要给<code>IUniswapV2Pair</code>使用。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_mintFee</span><span class="token punctuation">(</span><span class="token parameter">uint112 _reserve0<span class="token punctuation">,</span> uint112 _reserve1</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">bool feeOn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查看工厂是否收费</span>
    address feeTo <span class="token operator">=</span> <span class="token function">IUniswapV2Factory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">feeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果设置了地址，则进行收费</span>
    feeOn <span class="token operator">=</span> feeTo <span class="token operator">!=</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint _kLast <span class="token operator">=</span> kLast<span class="token punctuation">;</span> <span class="token comment">// gas savings</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>feeOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_kLast <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            uint rootK <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>_reserve0<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>_reserve1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            uint rootKLast <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>_kLast<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rootK <span class="token operator">&gt;</span> rootKLast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                uint numerator <span class="token operator">=</span> totalSupply<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>rootK<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>rootKLast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                uint denominator <span class="token operator">=</span> rootK<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rootKLast<span class="token punctuation">)</span><span class="token punctuation">;</span>
                uint liquidity <span class="token operator">=</span> numerator <span class="token operator">/</span> denominator<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>liquidity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">_mint</span><span class="token punctuation">(</span>feeTo<span class="token punctuation">,</span> liquidity<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_kLast <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        kLast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口协议" tabindex="-1"><a class="header-anchor" href="#接口协议" aria-hidden="true">#</a> 接口协议</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pragma solidity <span class="token operator">&gt;=</span><span class="token number">0.5</span><span class="token number">.0</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">IUniswapV2Factory</span> <span class="token punctuation">{</span>
    event <span class="token function">PairCreated</span><span class="token punctuation">(</span>address indexed token0<span class="token punctuation">,</span> address indexed token1<span class="token punctuation">,</span> address pair<span class="token punctuation">,</span> uint<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 查看收费地址</span>
    <span class="token keyword">function</span> <span class="token function">feeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 权限拥有者</span>
    <span class="token keyword">function</span> <span class="token function">feeToSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取池子实现</span>
    <span class="token keyword">function</span> <span class="token function">getPair</span><span class="token punctuation">(</span><span class="token parameter">address tokenA<span class="token punctuation">,</span> address tokenB</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>address pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取所有池子</span>
    <span class="token keyword">function</span> <span class="token function">allPairs</span><span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>address pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 工厂持有池子总量</span>
    <span class="token keyword">function</span> <span class="token function">allPairsLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建，核心方法</span>
    <span class="token keyword">function</span> <span class="token function">createPair</span><span class="token punctuation">(</span><span class="token parameter">address tokenA<span class="token punctuation">,</span> address tokenB</span><span class="token punctuation">)</span> external <span class="token function">returns</span> <span class="token punctuation">(</span>address pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 收费地址</span>
    <span class="token keyword">function</span> <span class="token function">setFeeTo</span><span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> external<span class="token punctuation">;</span>
    <span class="token comment">// 转移权限</span>
    <span class="token keyword">function</span> <span class="token function">setFeeToSetter</span><span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> external<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><ul><li>收费地址，在<code>pair</code>合约中使用。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>address feeTo <span class="token operator">=</span> <span class="token function">IUniswapV2Factory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">feeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果设置了地址，则进行收费</span>
feeOn <span class="token operator">=</span> feeTo <span class="token operator">!=</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>feeToSetter权限</code>，其实和<code>own</code>合约一样，合约权限，谁可以设置收费地址。</li><li><code>pair</code>主要使用了<code>{a:{b:c},b:{a:c}}</code>这种格式支持了快速查找，无论a-b，还是b-a都能查找到。</li><li><code>allPairsLength</code>可以查看工厂一共创建了多少个池子。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pragma solidity <span class="token operator">=</span><span class="token number">0.5</span><span class="token number">.16</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&#39;./interfaces/IUniswapV2Factory.sol&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./UniswapV2Pair.sol&#39;</span><span class="token punctuation">;</span>

contract UniswapV2Factory is IUniswapV2Factory <span class="token punctuation">{</span>
    <span class="token comment">// 收费地址</span>
    address <span class="token keyword">public</span> feeTo<span class="token punctuation">;</span>
    address <span class="token keyword">public</span> feeToSetter<span class="token punctuation">;</span>

    <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">address</span> <span class="token operator">=&gt;</span> <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">address</span> <span class="token operator">=&gt;</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">public</span> getPair<span class="token punctuation">;</span>
    address<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> allPairs<span class="token punctuation">;</span>

    event <span class="token function">PairCreated</span><span class="token punctuation">(</span>address indexed token0<span class="token punctuation">,</span> address indexed token1<span class="token punctuation">,</span> address pair<span class="token punctuation">,</span> uint<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>address _feeToSetter<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        feeToSetter <span class="token operator">=</span> _feeToSetter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">allPairsLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 返回池子数量</span>
        <span class="token keyword">return</span> allPairs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">createPair</span><span class="token punctuation">(</span><span class="token parameter">address tokenA<span class="token punctuation">,</span> address tokenB</span><span class="token punctuation">)</span> external <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">address pair</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">require</span><span class="token punctuation">(</span>tokenA <span class="token operator">!=</span> tokenB<span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2: IDENTICAL_ADDRESSES&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>address token0<span class="token punctuation">,</span> address token1<span class="token punctuation">)</span> <span class="token operator">=</span> tokenA <span class="token operator">&lt;</span> tokenB <span class="token operator">?</span> <span class="token punctuation">(</span>tokenA<span class="token punctuation">,</span> tokenB<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>tokenB<span class="token punctuation">,</span> tokenA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">require</span><span class="token punctuation">(</span>token0 <span class="token operator">!=</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2: ZERO_ADDRESS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">require</span><span class="token punctuation">(</span>getPair<span class="token punctuation">[</span>token0<span class="token punctuation">]</span><span class="token punctuation">[</span>token1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2: PAIR_EXISTS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// single check is sufficient</span>
        bytes memory bytecode <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>UniswapV2Pair<span class="token punctuation">)</span><span class="token punctuation">.</span>creationCode<span class="token punctuation">;</span>
        bytes32 salt <span class="token operator">=</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>token0<span class="token punctuation">,</span> token1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        assembly <span class="token punctuation">{</span>
            <span class="token literal-property property">pair</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">create2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mload</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">)</span><span class="token punctuation">,</span> salt<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">IUniswapV2Pair</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>token0<span class="token punctuation">,</span> token1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        getPair<span class="token punctuation">[</span>token0<span class="token punctuation">]</span><span class="token punctuation">[</span>token1<span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">;</span>
        getPair<span class="token punctuation">[</span>token1<span class="token punctuation">]</span><span class="token punctuation">[</span>token0<span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">;</span> <span class="token comment">// populate mapping in the reverse direction</span>
        allPairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
        emit <span class="token function">PairCreated</span><span class="token punctuation">(</span>token0<span class="token punctuation">,</span> token1<span class="token punctuation">,</span> pair<span class="token punctuation">,</span> allPairs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">setFeeTo</span><span class="token punctuation">(</span><span class="token parameter">address _feeTo</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span>
        <span class="token comment">// 设置收费地址</span>
        <span class="token function">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> feeToSetter<span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2: FORBIDDEN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        feeTo <span class="token operator">=</span> _feeTo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">setFeeToSetter</span><span class="token punctuation">(</span><span class="token parameter">address _feeToSetter</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span>
        <span class="token comment">// 设置拥有者</span>
        <span class="token function">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> feeToSetter<span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2: FORBIDDEN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        feeToSetter <span class="token operator">=</span> _feeToSetter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心" tabindex="-1"><a class="header-anchor" href="#核心" aria-hidden="true">#</a> 核心</h2><p>在做粉丝关注关系的时候常用<code>{a:{b:c},b:{a:c}}</code>，比如某大V的粉丝有谁和我关注了谁这两个功能在调用的时候为了性能就不会调用一样方法，查找我关注了谁直接查找我的池子就好了，这样不需要去所有N个大V列表里面去查询判断，如果查看大V被谁关注了，直接拿到大V下列表即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPair</span><span class="token punctuation">(</span><span class="token parameter">address tokenA<span class="token punctuation">,</span> address tokenB</span><span class="token punctuation">)</span> external <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">address pair</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 代币不能为一个</span>
      <span class="token function">require</span><span class="token punctuation">(</span>tokenA <span class="token operator">!=</span> tokenB<span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2: IDENTICAL_ADDRESSES&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 进行地址排序，在普通金融转账里面使用锁的时候也要求进行排序，防止死锁</span>
      <span class="token punctuation">(</span>address token0<span class="token punctuation">,</span> address token1<span class="token punctuation">)</span> <span class="token operator">=</span> tokenA <span class="token operator">&lt;</span> tokenB <span class="token operator">?</span> <span class="token punctuation">(</span>tokenA<span class="token punctuation">,</span> tokenB<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>tokenB<span class="token punctuation">,</span> tokenA<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 要求没有黑洞</span>
      <span class="token function">require</span><span class="token punctuation">(</span>token0 <span class="token operator">!=</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2: ZERO_ADDRESS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 不能已经初始化过</span>
      <span class="token function">require</span><span class="token punctuation">(</span>getPair<span class="token punctuation">[</span>token0<span class="token punctuation">]</span><span class="token punctuation">[</span>token1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;UniswapV2: PAIR_EXISTS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// single check is sufficient</span>
      <span class="token comment">// 查找字节码</span>
      bytes memory bytecode <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>UniswapV2Pair<span class="token punctuation">)</span><span class="token punctuation">.</span>creationCode<span class="token punctuation">;</span>
      <span class="token comment">// 加盐</span>
      bytes32 salt <span class="token operator">=</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>token0<span class="token punctuation">,</span> token1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      assembly <span class="token punctuation">{</span>
          <span class="token comment">// 创建pair</span>
          <span class="token literal-property property">pair</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">create2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mload</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">)</span><span class="token punctuation">,</span> salt<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 初始化pair</span>
      <span class="token function">IUniswapV2Pair</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>token0<span class="token punctuation">,</span> token1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 存入\`{a:{b:c},b:{a:c}}\`格式</span>
      getPair<span class="token punctuation">[</span>token0<span class="token punctuation">]</span><span class="token punctuation">[</span>token1<span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">;</span>
      getPair<span class="token punctuation">[</span>token1<span class="token punctuation">]</span><span class="token punctuation">[</span>token0<span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">;</span> <span class="token comment">// populate mapping in the reverse direction</span>
      <span class="token comment">// 推到池子数组，这样可以迭代</span>
      allPairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
      emit <span class="token function">PairCreated</span><span class="token punctuation">(</span>token0<span class="token punctuation">,</span> token1<span class="token punctuation">,</span> pair<span class="token punctuation">,</span> allPairs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="成长" tabindex="-1"><a class="header-anchor" href="#成长" aria-hidden="true">#</a> 成长</h2><p>使用字节码创建然后初始化，这里与<code>Java</code>语言中反射进行构造差不多。</p>`,16),o=[e];function c(i,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","IUniswapV2Factory.html.vue"]]);export{k as default};
