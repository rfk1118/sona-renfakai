import{_ as o,V as l,W as i,X as n,a0 as s,Y as e,a1 as a,$ as u,F as t}from"./framework-fd210779.js";const d="/assets/fd-87c6207e.jpg",r="/assets/spi-mac-06360d7a.jpg",k="/assets/Kqueue-29ca30e8.jpg",v="/assets/serversocketchannel-6e6c0c73.png",m="/assets/sockchannel-91a3f62e.png",h="/assets/SelectKey-63eab4ae.jpg",b="/assets/chanel_accept-c01871e9.jpg",y="/assets/IOEvent-e9b05402.jpg",g="/assets/read_set-f9f8146c.jpg",f={},w=n("h1",{id:"基础知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础知识","aria-hidden":"true"},"#"),s(" 基础知识")],-1),S={class:"hint-container tip"},_=n("p",{class:"hint-container-title"},"网络编程知识",-1),x={href:"https://book.douban.com/subject/26912767/",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"计算机-io",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#计算机-io","aria-hidden":"true"},"#"),s(" 计算机 IO")],-1),O=n("p",null,[n("code",null,"Linux Shell"),s(" 创建每个进程时都会打开三个文件：标准输入（ 描述符 0 )、标准输出（ 描述符 1 )和标准错误（ 描述符 2 )。")],-1),I=n("h2",{id:"网络编程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#网络编程","aria-hidden":"true"},"#"),s(" 网络编程")],-1),j=n("p",null,"网络编程关于服务器进程与客户端进行连接、处理进行展开讲解。",-1),A=u('<p>进程网络编程</p><div style="text-align:center;"><p><img src="'+d+`" alt="An image"> 图来自《深入理解计算机系统（原书第 3 版）》</p></div><h3 id="io抽象" tabindex="-1"><a class="header-anchor" href="#io抽象" aria-hidden="true">#</a> IO抽象</h3><p>IO包含BIO、NIO、AIO，在不同IO中 <code>open_listenfd</code>和<code>connfd</code>表现形式也不一样。</p><table><thead><tr><th>IO</th><th>listenfd</th><th style="text-align:right;">connfd</th></tr></thead><tbody><tr><td>BIO</td><td>ServerSocket</td><td style="text-align:right;">Socket</td></tr><tr><td>NIO</td><td>ServerScoketChannel</td><td style="text-align:right;">SocketChannel</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">AIO</p><p>AIO异步非阻塞的IO，在Linux和类Unix系统上支持不太好，Win支持比较好，但是服务器一般部署到Linux，所以后续不在进行讲解。</p></div><h2 id="netty-底层" tabindex="-1"><a class="header-anchor" href="#netty-底层" aria-hidden="true">#</a> Netty 底层</h2><h3 id="nio-编程" tabindex="-1"><a class="header-anchor" href="#nio-编程" aria-hidden="true">#</a> Nio 编程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个channel管理器，从管理器中可以查找到当前准备好的事件</span>
        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个listenfd，也就是Accept</span>
        <span class="token class-name">ServerSocketChannel</span> serverSocketChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置阻塞为false</span>
        serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 服务器绑定端口</span>
        serverSocketChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置关注的事件，Accept只负责接受连接，不负责处理数据</span>
        <span class="token comment">// 因为acceptor为cpu密集型，性能在网络</span>
        serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 开启listenFd</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 有事件发生</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 迭代器模式迭代事件</span>
                    <span class="token class-name">SelectionKey</span> selectionKey <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 如果是Accept，也就是需要创建connectionFd（handler)</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 创建connectionFd</span>
                        <span class="token class-name">SocketChannel</span> accept <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 设置非阻塞</span>
                        accept<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 注册到管理器中</span>
                        accept<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 如果这里是可读的，也就是数据都准备好了，开始处理事件</span>
                        <span class="token class-name">SocketChannel</span> read <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        read<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">ByteBuffer</span> dst <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        read<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        read<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        read<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> Selector</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Alternatively, use explicit SPI provider: SelectorProvider p = SelectorProvider.provider(); selector = p.openSelector(); serverSocket = p.openServerSocketChannel();</p></div><p>在 <code>Doug lea</code> 的 <code>ppt</code> 中出现了上面提示这一段话是什么意思？其实不同系统中 <code>java new io</code> 调用的底层 <code>Nio</code> 实现不一样，所以使用了 <code>spi</code> 机制，具体如图所示:</p><div style="text-align:center;"><p><img src="`+r+'" alt="An image"></p></div><p>如图所示，可以看出 <code>SelectorProvider</code> 在 <code>java.nio.channel.spi</code> 下，并且注释为 <code>Returns the system-wide default selector provider for this invocation of the Java virtual machine.</code> ，也就是不同平台下虚拟机调用返回实现是不一样的。</p><div style="text-align:center;"><p><img src="'+k+'" alt="An image"></p></div><p>看上图，已经初始化了两个<code>fd</code>，并且包含 <code>fdMap</code> ，这里与计算机底层理论知识对齐了，关于不同系统提供的 <code>Selector</code> 如下所示：</p><table><thead><tr><th>os</th><th style="text-align:right;">selector</th></tr></thead><tbody><tr><td>mac</td><td style="text-align:right;">KQueueSelector</td></tr><tr><td>linux</td><td style="text-align:right;">EpollSelector</td></tr><tr><td>win</td><td style="text-align:right;">WindowsSelector</td></tr></tbody></table><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h3><p>关于 <code>channel</code>，我们发现 <code>ServerSocketChannel</code> 和 <code>SocketChannel</code>两种，其底层可以认为是 <code>listenFd</code> 和 <code>connectionFd</code>。让我们来看看其功能有什么区别。</p><div style="text-align:center;"><p><img src="'+v+'" alt="An image"> 核心内容在于bind和accept</p></div><div style="text-align:center;"><p><img src="'+m+`" alt="An image"> 核心内容在于read和write</p></div><p>从两张图中进行对比可以看出 <code>ServerSocketChannel</code> 负责连接包含 <code>accept()</code> ， <code>SocketChannel</code> 负责处理包含<code>read()、write()</code> 方法为核心。在 <code>AbstractSelectableChannel</code> 模版设计模式中 <code>validOps()</code> 对关心事件进行验证。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">SelectionKey</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Selector</span> sel<span class="token punctuation">,</span> <span class="token keyword">int</span> ops<span class="token punctuation">,</span>
                                       <span class="token class-name">Object</span> att<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">ClosedChannelException</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>regLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// 如果关闭了丢出关闭异常</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClosedChannelException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 在这里调用了子类的方法，并对不用的channle做了事件的校验</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ops <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token function">validOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>blocking<span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalBlockingModeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SelectionKey</span> k <span class="token operator">=</span> <span class="token function">findKey</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                k<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>ops<span class="token punctuation">)</span><span class="token punctuation">;</span>
                k<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>att<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>keyLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClosedChannelException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractSelector</span><span class="token punctuation">)</span>sel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ops<span class="token punctuation">,</span> att<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">addKey</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ServerSocketChannel</code> 中关心事件如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">validOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SocketChannel</code> 中关心事件如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">validOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span>
            <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_WRITE</span>
            <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_CONNECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>做下总结， <code>ServerSocketChannel</code> 只负责连接， <code>SocketChannel</code> 负责处理数据，<code>server</code>和<code>client</code> 处理数据使用的都是 <code>SocketChannel</code> 。</p><table><thead><tr><th>SelectionKey</th><th style="text-align:right;">OP_ACCEPT</th><th style="text-align:right;">OP_WRITE</th><th style="text-align:right;">OP_WRITE</th><th style="text-align:right;">OP_CONNECT</th></tr></thead><tbody><tr><td>ServerSocketChannel</td><td style="text-align:right;">O</td><td style="text-align:right;">N</td><td style="text-align:right;">N</td><td style="text-align:right;">N</td></tr><tr><td>SocketChannel</td><td style="text-align:right;">N</td><td style="text-align:right;">O</td><td style="text-align:right;">O</td><td style="text-align:right;">O</td></tr></tbody></table><h3 id="selectionkey" tabindex="-1"><a class="header-anchor" href="#selectionkey" aria-hidden="true">#</a> SelectionKey</h3><p><code>SelectionKey</code> 包含了什么属性呢?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionKeyImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSelectionKey</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">SelChImpl</span> channel<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">SelectorImpl</span> selector<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> interestOps<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> readyOps<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对代码进行 <code>Debug</code> 一下，看下结果，从下图显示其是把 <code>Channel</code> 和 <code>Selector</code> 绑定到一块。</p><div style="text-align:center;"><p><img src="`+h+'" alt="An image"></p></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>',35),K=n("ul",null,[n("li",null,[n("strong",null,"通道："),s(" 链接文件，网络套接字等支持非阻塞(其实也就是 fd，文件描述符)；")])],-1),N=n("div",{style:{"text-align":"center"}},[n("p",null,[n("img",{src:b,alt:"An image"})])],-1),P=n("ul",null,[n("li",null,[n("strong",null,"选择器（管理器）:"),s(" 管理一系列的通道事件，主要是管理 "),n("code",null,"Channels"),s(" 的事件状态的，事件状态使用状态机流转；")])],-1),E=n("div",{style:{"text-align":"center"}},[n("p",null,[n("img",{src:y,alt:"An image"})])],-1),B=n("ul",null,[n("li",null,[n("strong",null,"数据绑定器（SelectionKeys）："),s(" 维持 IO 事件状态和绑定；")])],-1),T=n("div",{style:{"text-align":"center"}},[n("p",null,[n("img",{src:g,alt:"An image"})])],-1),F=n("ul",null,[n("li",null,[n("strong",null,"缓冲区："),s(" 对于通道的直接读和写，像数组一样的对象。")])],-1);function Y(R,z){const p=t("ExternalLinkIcon"),c=t("Mermaid");return l(),i("div",null,[w,n("div",S,[_,n("p",null,[s("推荐阅读"),n("a",x,[s("《深入理解计算机系统（原书第 3 版）》11～13章"),e(p)])])]),C,O,I,j,e(c,{id:"mermaid-20",code:"eJwrTi0sTc1LTnXJTEwvSszlUlB4Nqf3adfCpzNXvNg/+/mKbl07O200ISuFp3sank5Yn5NZXJKal5YCFH2xsOf57IlPJ6wBGvB03aJnHdufr14P1Iqps3/ii63bX6zf/mxj0/s9PU92dD5bs/BZ/8Jnnd1Y7YYbZqWQnJ8Ht+zF/nnP+pYScO3TtRNg1qblF2XDuUR68tm0tUB/wmwlwj6Yxue7lz/fvRYeHpjuweVKiI2wYMWpFSlMni5peT6h7cnu3UBloODcs+DFvsnPd09+Nm8OUdpnzwYFf89SUPADAFghOzo="}),A,a(" Channels: Connections to files, sockets etc that support non-blocking reads "),K,N,a(" Selectors: Tell which of a set of Channels have IO events "),P,E,a(" SelectionKeys: Maintain IO event status and bindings "),B,T,a(" Buffers: Array-like objects that can be directly read or written by Channels "),F])}const J=o(f,[["render",Y],["__file","index.html.vue"]]);export{J as default};
