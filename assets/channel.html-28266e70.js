import{_ as p,V as c,W as o,X as n,a0 as s,Y as e,$ as t,F as l}from"./framework-fd210779.js";const i="/assets/server-sockechannel-ccc4ab89.jpg",u="/assets/socket-channel-02de7358.png",k={},r=n("h1",{id:"channle",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#channle","aria-hidden":"true"},"#"),s(" Channle")],-1),d={id:"开放—封闭原则-ocp",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#开放—封闭原则-ocp","aria-hidden":"true"},"#",-1),m={href:"https://book.douban.com/subject/1140457/",target:"_blank",rel:"noopener noreferrer"},h=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>A Channel can have a parent depending on how it was created. For instance, a SocketChannel, that was accepted by ServerSocketChannel, will return the ServerSocketChannel as its parent on parent().</p><p>从 <code>Channel</code> 的文档中可以看出 <code>SocketChannel</code> 是由 <code>ServerSocketChannel</code> 产生的。 其实从《深入理解计算机系统》中我们知道 connectionfd 是从 listenfd 中产生而来的。</p></div><ul><li>ServerSocketChannel</li></ul><p><img src="'+i+'" alt="An image"></p><ul><li>SocketChannel</li></ul><p><img src="'+u+'" alt="An image"></p><p>从上面两种图中可以看出整体的设计是按照 <code>OCP</code> 原则进行编写的。</p>',6),b={href:"https://book.douban.com/subject/1140457/",target:"_blank",rel:"noopener noreferrer"},w=t(`<h3 id="serverchannel-创建" tabindex="-1"><a class="header-anchor" href="#serverchannel-创建" aria-hidden="true">#</a> ServerChannel 创建</h3><ol><li>查看 demo 配置</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token class-name">ServerBootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>boss<span class="token punctuation">,</span> work<span class="token punctuation">)</span>
          <span class="token comment">//  这里设置了需要初始化的channel</span>
          <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>查看<code>NioServerSocketChannel</code>配置，使用泛型处理，其实这里还有一个小技巧，<code>AbstractBootstrap&lt;B extends AbstractBootstrap&lt;B, C&gt;, C extends Channel&gt;</code>的用法妙处可以自行查阅。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">B</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> channelClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>channelClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;channelClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">channelFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReflectiveChannelFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>channelClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>反射工厂使用要求，必须有一个无参构造器</li><li>泛型进行限定，反射工厂进行创建</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里进行创建，使用反射</span>
    channel <span class="token operator">=</span> channelFactory<span class="token punctuation">.</span><span class="token function">newChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用这里创建一个channel</span>
<span class="token keyword">public</span> <span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token function">newSocket</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_SELECTOR_PROVIDER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这里也就是nio中的SelectorProvider</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SelectorProvider</span> <span class="token constant">DEFAULT_SELECTOR_PROVIDER</span> <span class="token operator">=</span> <span class="token class-name">SelectorProvider</span><span class="token punctuation">.</span><span class="token function">provider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ServerSocketChannel</span> <span class="token function">newSocket</span><span class="token punctuation">(</span><span class="token class-name">SelectorProvider</span> provider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> provider<span class="token punctuation">.</span><span class="token function">openServerSocketChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 省略</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> channel<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioServerSocketChannelConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>创建了<code>channel</code>，并设置信息</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">AbstractChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建的channel为ServerSocketChannel,所以没有父亲</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    <span class="token comment">// 创建一个channelId</span>
    id <span class="token operator">=</span> <span class="token function">newId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回一个NioMessageUnsafe</span>
    unsafe <span class="token operator">=</span> <span class="token function">newUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个Pipeline，在创建的时候将this传递了进去，这个时候AbstractChannel已经创建了，</span>
    <span class="token comment">// 所以这里是没有循环依赖的，这样channel里面有pipeline,pipeline里面有channel</span>
    pipeline <span class="token operator">=</span> <span class="token function">newChannelPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token class-name">DefaultChannelPipeline</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token string">&quot;channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  succeededFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SucceededChannelFuture</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  voidPromise <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">VoidChannelPromise</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 初始化了AbstractChannelHandlerContext的链路</span>
  tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TailContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeadContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>
  tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token class-name">AbstractNioChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> parent<span class="token punctuation">,</span> <span class="token class-name">SelectableChannel</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> readInterestOp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置channel</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>ch <span class="token operator">=</span> ch<span class="token punctuation">;</span>
  <span class="token comment">// 关心的事件</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>readInterestOp <span class="token operator">=</span> readInterestOp<span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 非阻塞</span>
      ch<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 省略</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>产生<code>DefaultServerSocketChannelConfig</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultServerSocketChannelConfig</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> channel<span class="token punctuation">,</span> <span class="token class-name">ServerSocket</span> javaSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>javaSocket <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;javaSocket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这里持有socket</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>javaSocket <span class="token operator">=</span> javaSocket<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">DefaultChannelConfig</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置channel和自适应接收字节缓冲区分配器</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AdaptiveRecvByteBufAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token class-name">DefaultChannelConfig</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">RecvByteBufAllocator</span> allocator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从channel中将数据copy到config，职责很清晰</span>
    <span class="token function">setRecvByteBufAllocator</span><span class="token punctuation">(</span>allocator<span class="token punctuation">,</span> channel<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>channel <span class="token operator">=</span> channel<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>反射+泛型+工厂保证了配置的性，而 OCP 原则也给开发人员留下架子让其设计自己业务的 <code>channel</code> 。</p>`,13);function y(C,f){const a=l("ExternalLinkIcon");return c(),o("div",null,[r,n("h3",d,[v,s(),n("a",m,[s("开放—封闭原则（OCP）"),e(a)])]),h,n("ul",null,[n("li",null,[n("a",b,[s("敏捷软件开发 第九章 开放—封闭原则（OCP）"),e(a)])])]),w])}const g=p(k,[["render",y],["__file","channel.html.vue"]]);export{g as default};
