const n=JSON.parse('{"key":"v-f4be6bc8","path":"/languages/java/jvm/singleton.html","title":"Spring单例bean对jvm的影响","lang":"zh-CN","frontmatter":{"description":"Spring单例bean对jvm的影响 问题是朋友在面试遇到的，自己从知识框架里找到了相关的知识点，写个文章记录一下。 单例设计模式 单例设计模式大家都会写，不管是懒汉式还是饿汉式，只要单例被初始化后基本上都会随着虚拟机生命周期销毁而销毁，即然是这样，那在虚拟机中必然会从新生代晋级到老年代。 扩展 如果在工作中需要多个单例的bean，还不想被spring生命周期管理，可以使用下面方式进行编写。 // hashcode and eq方法省略 public class Student { private String name; private int age; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } public enum StudentPredicateE { NAME_SUPPLIER(student -&gt; { if (null == student || student.getName() == null) { return false; } return student.getName().length() &gt; 10; }), AGE_SUPPLIER(student -&gt; student.getAge() &gt; 10), ; StudentPredicateE(Predicate&lt;Student&gt; p) { this.p = p; } // 这里一定设置成final，并且不提供set方法 private final Predicate&lt;Student&gt; p; public Predicate&lt;Student&gt; getP() { return p; } } // todo 省略查询和添加过程 List&lt;Student&gt; l = new ArrayList&lt;&gt;(); // 判断年龄符合条件 List&lt;Student&gt; ageS = l.stream().filter(StudentPredicateE.AGE_SUPPLIER.getP()).collect(Collectors.toList()); // 判断姓名符合条件 List&lt;Student&gt; nameS = l.stream().filter(StudentPredicateE.NAME_SUPPLIER.getP()).collect(Collectors.toList()); // 查找年龄和姓名都不符合条件，这里使用了negate List&lt;Student&gt; negate = l.stream() .filter(StudentPredicateE.NAME_SUPPLIER.getP().negate() .and(StudentPredicateE.AGE_SUPPLIER.getP().negate())) .collect(Collectors.toList());","head":[["meta",{"property":"og:url","content":"https://renfakai.com/languages/java/jvm/singleton.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"Spring单例bean对jvm的影响"}],["meta",{"property":"og:description","content":"Spring单例bean对jvm的影响 问题是朋友在面试遇到的，自己从知识框架里找到了相关的知识点，写个文章记录一下。 单例设计模式 单例设计模式大家都会写，不管是懒汉式还是饿汉式，只要单例被初始化后基本上都会随着虚拟机生命周期销毁而销毁，即然是这样，那在虚拟机中必然会从新生代晋级到老年代。 扩展 如果在工作中需要多个单例的bean，还不想被spring生命周期管理，可以使用下面方式进行编写。 // hashcode and eq方法省略 public class Student { private String name; private int age; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } public enum StudentPredicateE { NAME_SUPPLIER(student -&gt; { if (null == student || student.getName() == null) { return false; } return student.getName().length() &gt; 10; }), AGE_SUPPLIER(student -&gt; student.getAge() &gt; 10), ; StudentPredicateE(Predicate&lt;Student&gt; p) { this.p = p; } // 这里一定设置成final，并且不提供set方法 private final Predicate&lt;Student&gt; p; public Predicate&lt;Student&gt; getP() { return p; } } // todo 省略查询和添加过程 List&lt;Student&gt; l = new ArrayList&lt;&gt;(); // 判断年龄符合条件 List&lt;Student&gt; ageS = l.stream().filter(StudentPredicateE.AGE_SUPPLIER.getP()).collect(Collectors.toList()); // 判断姓名符合条件 List&lt;Student&gt; nameS = l.stream().filter(StudentPredicateE.NAME_SUPPLIER.getP()).collect(Collectors.toList()); // 查找年龄和姓名都不符合条件，这里使用了negate List&lt;Student&gt; negate = l.stream() .filter(StudentPredicateE.NAME_SUPPLIER.getP().negate() .and(StudentPredicateE.AGE_SUPPLIER.getP().negate())) .collect(Collectors.toList());"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://renfakai.com/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-27T09:57:43.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Spring单例bean对jvm的影响"}],["meta",{"property":"article:modified_time","content":"2023-02-27T09:57:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring单例bean对jvm的影响\\",\\"image\\":[\\"https://renfakai.com/\\"],\\"dateModified\\":\\"2023-02-27T09:57:43.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"单例设计模式","slug":"单例设计模式","link":"#单例设计模式","children":[{"level":3,"title":"扩展","slug":"扩展","link":"#扩展","children":[]}]},{"level":2,"title":"Spring单例bean","slug":"spring单例bean","link":"#spring单例bean","children":[]},{"level":2,"title":"影响","slug":"影响","link":"#影响","children":[]},{"level":2,"title":"进阶","slug":"进阶","link":"#进阶","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1677491863000,"updatedTime":1677491863000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":3.63,"words":1089},"filePathRelative":"languages/java/jvm/singleton.md","localizedDate":"2023年2月27日","excerpt":"<h1> Spring单例bean对jvm的影响</h1>\\n<p>问题是朋友在面试遇到的，自己从知识框架里找到了相关的知识点，写个文章记录一下。\\n</p>\\n<h2> 单例设计模式</h2>\\n<p>单例设计模式大家都会写，不管是懒汉式还是饿汉式，只要单例被初始化后基本上都会随着虚拟机生命周期销毁而销毁，即然是这样，那在虚拟机中必然会从新生代晋级到老年代。</p>\\n<h3> 扩展</h3>\\n<p>如果在工作中需要多个单例的bean，还不想被spring生命周期管理，可以使用下面方式进行编写。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// hashcode and eq方法省略</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Student</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setName</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getAge</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> age<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setAge</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>age <span class=\\"token operator\\">=</span> age<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">enum</span> <span class=\\"token class-name\\">StudentPredicateE</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token function\\">NAME_SUPPLIER</span><span class=\\"token punctuation\\">(</span>student <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">==</span> student <span class=\\"token operator\\">||</span> student<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> student<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\n    <span class=\\"token function\\">AGE_SUPPLIER</span><span class=\\"token punctuation\\">(</span>student <span class=\\"token operator\\">-&gt;</span> student<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAge</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\n    <span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token class-name\\">StudentPredicateE</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Predicate</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> p<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>p <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 这里一定设置成final，并且不提供set方法</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Predicate</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> p<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Predicate</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getP</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> p<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// todo 省略查询和添加过程</span>\\n<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> l <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 判断年龄符合条件</span>\\n<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> ageS <span class=\\"token operator\\">=</span> l<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StudentPredicateE</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">AGE_SUPPLIER</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getP</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">collect</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Collectors</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 判断姓名符合条件</span>\\n<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> nameS <span class=\\"token operator\\">=</span> l<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StudentPredicateE</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NAME_SUPPLIER</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getP</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">collect</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Collectors</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 查找年龄和姓名都不符合条件，这里使用了negate</span>\\n<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> negate <span class=\\"token operator\\">=</span> l<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StudentPredicateE</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NAME_SUPPLIER</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getP</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">negate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">and</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StudentPredicateE</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">AGE_SUPPLIER</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getP</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">negate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">collect</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Collectors</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{n as data};
