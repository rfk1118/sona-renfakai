const n=JSON.parse('{"key":"v-243f7776","path":"/languages/java/thread/java/juc/daemon.html","title":"daemon","lang":"zh-CN","frontmatter":{"description":"daemon Java中的线程主要分为两种，用户线程，daemon线程。 /** * 标记当前线程是daemon线程还是用户线程 * Marks this thread as either a {@linkplain #isDaemon daemon} thread * 虚拟机会在所有的线程都是daemon线程的时候退出 * or a user thread. The Java Virtual Machine exits when the only * threads running are all daemon threads. * 这个方法必须在线程启动前进行设置 * &lt;p&gt; This method must be invoked before the thread is started. * * 如果设置成true,代表其为daemon线程 * @param on * if {@code true}, marks this thread as a daemon thread * * @throws IllegalThreadStateException * if this thread is {@linkplain #isAlive alive} * * @throws SecurityException * if {@link #checkAccess} determines that the current * thread cannot modify this thread */ public final void setDaemon(boolean on) { checkAccess(); if (isAlive()) { throw new IllegalThreadStateException(); } daemon = on; }","head":[["meta",{"property":"og:url","content":"https://renfakai.com/languages/java/thread/java/juc/daemon.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"daemon"}],["meta",{"property":"og:description","content":"daemon Java中的线程主要分为两种，用户线程，daemon线程。 /** * 标记当前线程是daemon线程还是用户线程 * Marks this thread as either a {@linkplain #isDaemon daemon} thread * 虚拟机会在所有的线程都是daemon线程的时候退出 * or a user thread. The Java Virtual Machine exits when the only * threads running are all daemon threads. * 这个方法必须在线程启动前进行设置 * &lt;p&gt; This method must be invoked before the thread is started. * * 如果设置成true,代表其为daemon线程 * @param on * if {@code true}, marks this thread as a daemon thread * * @throws IllegalThreadStateException * if this thread is {@linkplain #isAlive alive} * * @throws SecurityException * if {@link #checkAccess} determines that the current * thread cannot modify this thread */ public final void setDaemon(boolean on) { checkAccess(); if (isAlive()) { throw new IllegalThreadStateException(); } daemon = on; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-14T11:22:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-14T11:22:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"daemon\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-14T11:22:30.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"用户线程测试","slug":"用户线程测试","link":"#用户线程测试","children":[]},{"level":2,"title":"daemon测试","slug":"daemon测试","link":"#daemon测试","children":[]},{"level":2,"title":"daemon错误使用","slug":"daemon错误使用","link":"#daemon错误使用","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1686741750000,"updatedTime":1686741750000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":4.34,"words":1303},"filePathRelative":"languages/java/thread/java/juc/daemon.md","localizedDate":"2023年6月14日","excerpt":"<h1> daemon</h1>\\n<p>Java中的线程主要分为两种，用户线程，daemon线程。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>     <span class=\\"token doc-comment comment\\">/**\\n     * 标记当前线程是daemon线程还是用户线程\\n     * Marks this thread as either a <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">isDaemon</span></span> daemon<span class=\\"token punctuation\\">}</span> thread\\n     * 虚拟机会在所有的线程都是daemon线程的时候退出\\n     * or a user thread. The Java Virtual Machine exits when the only\\n     * threads running are all daemon threads.\\n     *  这个方法必须在线程启动前进行设置\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span> This method must be invoked before the thread is started.\\n     *\\n     * 如果设置成true,代表其为daemon线程\\n     * <span class=\\"token keyword\\">@param</span>  <span class=\\"token parameter\\">on</span>\\n     *         if <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span>, marks this thread as a daemon thread\\n     *\\n     * <span class=\\"token keyword\\">@throws</span>  <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalThreadStateException</span></span>\\n     *          if this thread is <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">isAlive</span></span> alive<span class=\\"token punctuation\\">}</span>\\n     *\\n     * <span class=\\"token keyword\\">@throws</span>  <span class=\\"token reference\\"><span class=\\"token class-name\\">SecurityException</span></span>\\n     *          if <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">checkAccess</span></span><span class=\\"token punctuation\\">}</span> determines that the current\\n     *          thread cannot modify this thread\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setDaemon</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">boolean</span> on<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">checkAccess</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">isAlive</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalThreadStateException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        daemon <span class=\\"token operator\\">=</span> on<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{n as data};
