const n=JSON.parse('{"key":"v-49e4196b","path":"/middleware/netty/nio/selectors/thread-factory.html","title":"DefaultThreadFactory","lang":"zh-CN","frontmatter":{"description":"DefaultThreadFactory 装饰器优化线程 if (nThreads &lt;= 0) { throw new IllegalArgumentException(String.format(\\"nThreads: %d (expected: &gt; 0)\\", nThreads)); } if (executor == null) { executor = new ThreadPerTaskExecutor(newDefaultThreadFactory()); } children = new EventExecutor[nThreads]; // 线程池工厂 protected ThreadFactory newDefaultThreadFactory() { return new DefaultThreadFactory(getClass()); }","head":[["meta",{"property":"og:url","content":"https://renfakai.com/middleware/netty/nio/selectors/thread-factory.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"DefaultThreadFactory"}],["meta",{"property":"og:description","content":"DefaultThreadFactory 装饰器优化线程 if (nThreads &lt;= 0) { throw new IllegalArgumentException(String.format(\\"nThreads: %d (expected: &gt; 0)\\", nThreads)); } if (executor == null) { executor = new ThreadPerTaskExecutor(newDefaultThreadFactory()); } children = new EventExecutor[nThreads]; // 线程池工厂 protected ThreadFactory newDefaultThreadFactory() { return new DefaultThreadFactory(getClass()); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T13:33:42.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-11T13:33:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DefaultThreadFactory\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T13:33:42.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"装饰器优化线程","slug":"装饰器优化线程","link":"#装饰器优化线程","children":[]},{"level":3,"title":"FastThreadLocalThread 有什么用呢？","slug":"fastthreadlocalthread-有什么用呢","link":"#fastthreadlocalthread-有什么用呢","children":[]},{"level":3,"title":"其他常用","slug":"其他常用","link":"#其他常用","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1678541622000,"updatedTime":1678541622000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":2.18,"words":653},"filePathRelative":"middleware/netty/nio/selectors/thread-factory.md","localizedDate":"2023年3月11日","excerpt":"<h1> DefaultThreadFactory</h1>\\n<h3> 装饰器优化线程</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>nThreads <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalArgumentException</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">format</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"nThreads: %d (expected: &gt; 0)\\"</span><span class=\\"token punctuation\\">,</span> nThreads<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token punctuation\\">}</span>\\n\\n   <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>executor <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            executor <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ThreadPerTaskExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">newDefaultThreadFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token punctuation\\">}</span>\\n\\n   children <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">EventExecutor</span><span class=\\"token punctuation\\">[</span>nThreads<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n   <span class=\\"token comment\\">// 线程池工厂</span>\\n   <span class=\\"token keyword\\">protected</span> <span class=\\"token class-name\\">ThreadFactory</span> <span class=\\"token function\\">newDefaultThreadFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">DefaultThreadFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{n as data};
