const e=JSON.parse('{"key":"v-3096b6b4","path":"/languages/java/thread/java/juc/rejected-execution-handler.html","title":"ExecutionPolicy","lang":"zh-CN","frontmatter":{"description":"ExecutionPolicy 拒绝执行处理程序，从 RejectedExecutionHandler 实现子类命名 Policy 可以看出这里是策略设计模式，这也是我最喜欢设计模式之一 接口和实现 接口 // 无法由ThreadPoolExecutor执行的任务的处理程序 public interface RejectedExecutionHandler { // 当execute无法接受任务时，可能由ThreadPoolExecutor调用的方法。这可能在没有更多线程或队列槽可用时发生， // 因为它们的界限将被超出，或者在 Executor 关闭时。在没有其他替代方案的情况下，该方法可能会抛出未经检查的RejectedExecutionException // 该RejectedExecutionException将传播给execute的调用者。 void rejectedExecution(Runnable r, ThreadPoolExecutor executor); }","head":[["meta",{"property":"og:url","content":"https://renfakai.com/languages/java/thread/java/juc/rejected-execution-handler.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"ExecutionPolicy"}],["meta",{"property":"og:description","content":"ExecutionPolicy 拒绝执行处理程序，从 RejectedExecutionHandler 实现子类命名 Policy 可以看出这里是策略设计模式，这也是我最喜欢设计模式之一 接口和实现 接口 // 无法由ThreadPoolExecutor执行的任务的处理程序 public interface RejectedExecutionHandler { // 当execute无法接受任务时，可能由ThreadPoolExecutor调用的方法。这可能在没有更多线程或队列槽可用时发生， // 因为它们的界限将被超出，或者在 Executor 关闭时。在没有其他替代方案的情况下，该方法可能会抛出未经检查的RejectedExecutionException // 该RejectedExecutionException将传播给execute的调用者。 void rejectedExecution(Runnable r, ThreadPoolExecutor executor); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-29T09:16:04.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-29T09:16:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ExecutionPolicy\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-29T09:16:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"接口和实现","slug":"接口和实现","link":"#接口和实现","children":[{"level":3,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1693300564000,"updatedTime":1693300564000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":1.69,"words":506},"filePathRelative":"languages/java/thread/java/juc/rejected-execution-handler.md","localizedDate":"2023年8月29日","excerpt":"<h1> ExecutionPolicy</h1>\\n<p>拒绝执行处理程序，从 <code>RejectedExecutionHandler</code> 实现子类命名 <code>Policy</code> 可以看出这里是策略设计模式，这也是我最喜欢设计模式之一</p>\\n<h2> 接口和实现</h2>\\n<h3> 接口</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 无法由ThreadPoolExecutor执行的任务的处理程序</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">RejectedExecutionHandler</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token comment\\">// 当execute无法接受任务时，可能由ThreadPoolExecutor调用的方法。这可能在没有更多线程或队列槽可用时发生，</span>\\n    <span class=\\"token comment\\">// 因为它们的界限将被超出，或者在 Executor 关闭时。在没有其他替代方案的情况下，该方法可能会抛出未经检查的RejectedExecutionException</span>\\n    <span class=\\"token comment\\">// 该RejectedExecutionException将传播给execute的调用者。</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">rejectedExecution</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Runnable</span> r<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ThreadPoolExecutor</span> executor<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{e as data};
