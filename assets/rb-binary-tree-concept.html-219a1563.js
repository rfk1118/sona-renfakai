const n=JSON.parse('{"key":"v-61c24995","path":"/basic-skill/algorithms/tree/rb-binary-tree-concept.html","title":"红黑树","lang":"zh-CN","frontmatter":{"description":"红黑树 为什么出现红黑树？ 解决插入数据有序导致查找时间复杂度从O(logN)上升到O(N)问题 插入数据有序会导致数据结构从二叉树转换成链表 解决方式 自顶而下 自下而上 特征 节点都有颜色，以TreeMap为例，查看TreeMap#Entry private static final boolean RED = false; private static final boolean BLACK = true; static final class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; { K key; V value; Entry&lt;K,V&gt; left; Entry&lt;K,V&gt; right; Entry&lt;K,V&gt; parent; // 节点都有颜色 boolean color = BLACK; Entry(K key, V value, Entry&lt;K,V&gt; parent) { this.key = key; this.value = value; this.parent = parent; } public K getKey() { return key; } public V getValue() { return value; } public V setValue(V value) { V oldValue = this.value; this.value = value; return oldValue; } public boolean equals(Object o) { if (!(o instanceof Map.Entry)) return false; Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o; return valEquals(key,e.getKey()) &amp;&amp; valEquals(value,e.getValue()); } public int hashCode() { int keyHash = (key==null ? 0 : key.hashCode()); int valueHash = (value==null ? 0 : value.hashCode()); return keyHash ^ valueHash; } public String toString() { return key + \\"=\\" + value; } }","head":[["meta",{"property":"og:url","content":"https://renfakai.com/basic-skill/algorithms/tree/rb-binary-tree-concept.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"红黑树"}],["meta",{"property":"og:description","content":"红黑树 为什么出现红黑树？ 解决插入数据有序导致查找时间复杂度从O(logN)上升到O(N)问题 插入数据有序会导致数据结构从二叉树转换成链表 解决方式 自顶而下 自下而上 特征 节点都有颜色，以TreeMap为例，查看TreeMap#Entry private static final boolean RED = false; private static final boolean BLACK = true; static final class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; { K key; V value; Entry&lt;K,V&gt; left; Entry&lt;K,V&gt; right; Entry&lt;K,V&gt; parent; // 节点都有颜色 boolean color = BLACK; Entry(K key, V value, Entry&lt;K,V&gt; parent) { this.key = key; this.value = value; this.parent = parent; } public K getKey() { return key; } public V getValue() { return value; } public V setValue(V value) { V oldValue = this.value; this.value = value; return oldValue; } public boolean equals(Object o) { if (!(o instanceof Map.Entry)) return false; Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o; return valEquals(key,e.getKey()) &amp;&amp; valEquals(value,e.getValue()); } public int hashCode() { int keyHash = (key==null ? 0 : key.hashCode()); int valueHash = (value==null ? 0 : value.hashCode()); return keyHash ^ valueHash; } public String toString() { return key + \\"=\\" + value; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://renfakai.com/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-31T16:49:52.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"红黑树"}],["meta",{"property":"article:modified_time","content":"2023-01-31T16:49:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"红黑树\\",\\"image\\":[\\"https://renfakai.com/\\"],\\"dateModified\\":\\"2023-01-31T16:49:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"为什么出现红黑树？","slug":"为什么出现红黑树","link":"#为什么出现红黑树","children":[]},{"level":3,"title":"特征","slug":"特征","link":"#特征","children":[]},{"level":3,"title":"左右旋和反转颜色","slug":"左右旋和反转颜色","link":"#左右旋和反转颜色","children":[]},{"level":3,"title":"插入数据","slug":"插入数据","link":"#插入数据","children":[]},{"level":3,"title":"常用工具","slug":"常用工具","link":"#常用工具","children":[]},{"level":3,"title":"删除节点","slug":"删除节点","link":"#删除节点","children":[]},{"level":3,"title":"java#TreeMap","slug":"java-treemap","link":"#java-treemap","children":[]},{"level":3,"title":"参考地址","slug":"参考地址","link":"#参考地址","children":[]}],"git":{"createdTime":1675183792000,"updatedTime":1675183792000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":13.28,"words":3983},"filePathRelative":"basic-skill/algorithms/tree/rb-binary-tree-concept.md","localizedDate":"2023年2月1日","excerpt":"<h1> 红黑树</h1>\\n<h3> 为什么出现红黑树？</h3>\\n<ol>\\n<li>解决插入数据有序导致查找时间复杂度从O(logN)上升到O(N)问题\\n<ul>\\n<li>插入数据有序会导致数据结构从二叉树转换成链表</li>\\n</ul>\\n</li>\\n<li>解决方式\\n<ul>\\n<li>自顶而下</li>\\n<li>自下而上</li>\\n</ul>\\n</li>\\n</ol>\\n<h3> 特征</h3>\\n<ol>\\n<li>节点都有颜色，以<code>TreeMap</code>为例，查看<code>TreeMap#Entry</code></li>\\n</ol>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token constant\\">RED</span>   <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token constant\\">BLACK</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">K</span> key<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">V</span> value<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> left<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> right<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> parent<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 节点都有颜色</span>\\n    <span class=\\"token keyword\\">boolean</span> color <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">BLACK</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token class-name\\">Entry</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">K</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">V</span> value<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> parent<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>key <span class=\\"token operator\\">=</span> key<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>parent <span class=\\"token operator\\">=</span> parent<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">K</span> <span class=\\"token function\\">getKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> key<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">V</span> <span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> value<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">V</span> <span class=\\"token function\\">setValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">V</span> value<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">V</span> oldValue <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> oldValue<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> o<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span>o <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">?</span><span class=\\"token punctuation\\">&gt;</span></span> e <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">?</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">)</span>o<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">valEquals</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span>e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">valEquals</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">,</span>e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">hashCode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> keyHash <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>key<span class=\\"token operator\\">==</span><span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">?</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">:</span> key<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hashCode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> valueHash <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>value<span class=\\"token operator\\">==</span><span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">?</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">:</span> value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hashCode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> keyHash <span class=\\"token operator\\">^</span> valueHash<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> key <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"=\\"</span> <span class=\\"token operator\\">+</span> value<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{n as data};
