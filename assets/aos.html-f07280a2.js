import{_ as a,V as n,W as s,a0 as e}from"./framework-e54e0297.js";const c="/assets/AbstractOwnableSynchronizer-6fa40cb1.png",t="/assets/aqs-2416aacd.png",l={},i=e('<h1 id="exclusively" tabindex="-1"><a class="header-anchor" href="#exclusively" aria-hidden="true">#</a> exclusively</h1><p>线程独占拥有的同步器。此类为创建所有权概念的锁和相关同步器提供了基础。<code>AbstractOwnableSynchronizer</code>类本身不管理或使用此信息。但是，子类和工具可以使用适当维护的值来帮助控制和监视访问并提供诊断。</p><h2 id="核心api" tabindex="-1"><a class="header-anchor" href="#核心api" aria-hidden="true">#</a> 核心api</h2><p><img src="'+c+'" alt="An image"></p><ul><li>setExclusiveOwnerThread(Thread thread) <ul><li><code>setExclusiveOwnerThread(Thread.currentThread());</code>访问权限的线程</li><li><code>setExclusiveOwnerThread(null);</code>清空访问权限的线程，都可以访问</li></ul></li><li>getExclusiveOwnerThread() <ul><li>返回最后由<code>setExclusiveOwnerThread</code>设置的线程，如果从未设置，则返回null</li></ul></li></ul><h2 id="继承关系" tabindex="-1"><a class="header-anchor" href="#继承关系" aria-hidden="true">#</a> 继承关系</h2><p><img src="'+t+`" alt="An image"></p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><ol><li><code>AbstractOwnableSynchronizer</code>，从代码中可以看到此使用的是独占模式</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractOwnableSynchronizer</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
    <span class="token comment">// todo 其他无用的删除</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Thread</span> exclusiveOwnerThread<span class="token punctuation">;</span>

    <span class="token comment">// 独占模式那个线程占用</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        exclusiveOwnerThread <span class="token operator">=</span> thread<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回锁的持有者</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Thread</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> exclusiveOwnerThread<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>为子类提供最后持有访问权限查询和设置接口</p>`,12),r=[i];function o(p,d){return n(),s("div",null,r)}const h=a(l,[["render",o],["__file","aos.html.vue"]]);export{h as default};
