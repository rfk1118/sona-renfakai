import{_ as p,V as o,W as c,Y as n,a1 as s,Z as e,a0 as t,F as i}from"./framework-e54e0297.js";const l={},u=n("h1",{id:"heap源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#heap源码","aria-hidden":"true"},"#"),s(" Heap源码")],-1),d=n("p",null,[s("本文主要读"),n("code",null,"Go"),s("源码，其实"),n("code",null,"Go"),s("在堆上的的设计和编码会让学习者很容易看到堆的本质。")],-1),r={id:"文档地址",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#文档地址","aria-hidden":"true"},"#",-1),v={href:"https://pkg.go.dev/container/heap",target:"_blank",rel:"noopener noreferrer"},m=t('<p>文档地址给了<code>intHeap</code>和<code>PriorityQueue</code>两个demo，这是因为<code>Go</code>语言暴露的方法要比<code>java</code>多，所以需要我们能更准确的写出代码，现在进行对比。</p><table><thead><tr><th>语言</th><th style="text-align:right;">交换数据方式</th><th style="text-align:right;">性能</th><th style="text-align:right;">理解</th></tr></thead><tbody><tr><td>Go</td><td style="text-align:right;">交换</td><td style="text-align:right;">低</td><td style="text-align:right;">容易</td></tr><tr><td>Java</td><td style="text-align:right;">移动</td><td style="text-align:right;">高</td><td style="text-align:right;">困难</td></tr></tbody></table>',2),h={id:"基础功能排序",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#基础功能排序","aria-hidden":"true"},"#",-1),f={href:"https://pkg.go.dev/sort",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>排序下面的实现有<code>插入排序，堆排序，快排</code>等。</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>// 这个就是排序的接口
type Interface interface {
  // 返回集合的数量
  Len() int
  // 这里有传递性，自反性等原理
  // 判断两个值的大小
  Less(i, j int) bool
  // 这里是数据交换，也是整个设计的核心
  Swap(i, j int)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x={id:"堆基础功能定义",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#堆基础功能定义","aria-hidden":"true"},"#",-1),y={href:"https://pkg.go.dev/sort",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  <span class="token comment">// 排序接口</span>
  sort<span class="token punctuation">.</span>Interface
  <span class="token comment">// 增加数据</span>
  <span class="token function">Push</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// add x as element Len()</span>
  <span class="token comment">// 从堆顶推出元素</span>
  <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// remove and return element Len() - 1.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码" aria-hidden="true">#</a> 核心代码</h2><h3 id="堆化" tabindex="-1"><a class="header-anchor" href="#堆化" aria-hidden="true">#</a> 堆化</h3><p>其实从最底层的父亲开始，都向下下沉就是堆话，其实这里最重要的就是找到最后一个父亲，也就是<code>h.Len()/2-1</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Init</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// heapify</span>
  n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
    <span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push" aria-hidden="true">#</a> Push</h3><p>我们每次推入元素都将其放到最后一个位置，让后在进行上浮，上浮到合适的位置即可。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Push pushes the element x onto the heap.</span>
<span class="token comment">// The complexity is O(log n) where n = h.Len().</span>
<span class="token keyword">func</span> <span class="token function">Push</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 推入到最后体格位置</span>
  h<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pop" tabindex="-1"><a class="header-anchor" href="#pop" aria-hidden="true">#</a> Pop</h3><p>对于大顶堆或者小顶堆，位置在0的就是我们要推出的元素，但是推出位置为0的元素后就会有一个空洞，我们就需要从后面位置拿一个元素，放到位置0，让其在下沉下去，为了让空间连续，拿最后一个元素最好。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Pop removes and returns the minimum element (according to Less) from the heap.</span>
<span class="token comment">// The complexity is O(log n) where n = h.Len().</span>
<span class="token comment">// Pop is equivalent to Remove(h, 0).</span>
<span class="token keyword">func</span> <span class="token function">Pop</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
  n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
  h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
  <span class="token comment">// 下沉</span>
  <span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
  <span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="remove" tabindex="-1"><a class="header-anchor" href="#remove" aria-hidden="true">#</a> Remove</h3><p>移除第i个位置的元素，这里为什么下沉不下去还要上浮呢？这是因为多线程问题，如果最后一个元素刚被插入，还没进行上浮，现在放到第i个位置，其实是下沉不下去的，所以这里要上浮，保证其堆的特征不被改变。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Remove removes and returns the element at index i from the heap.</span>
<span class="token comment">// The complexity is O(log n) where n = h.Len().</span>
<span class="token keyword">func</span> <span class="token function">Remove</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
  n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">if</span> n <span class="token operator">!=</span> i <span class="token punctuation">{</span>
    h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fix" tabindex="-1"><a class="header-anchor" href="#fix" aria-hidden="true">#</a> Fix</h3><p>这个很容易理解，那就是第i个位置上的数据被修改了后，其结果可能大于修改前，也可能小于修改前，所以先下沉在上浮就好了，其实可以与之前的值做对比的，然后做处理的，不过现在的方式更安全。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Fix re-establishes the heap ordering after the element at index i has changed its value.</span>
<span class="token comment">// Changing the value of the element at index i and then calling Fix is equivalent to,</span>
<span class="token comment">// but less expensive than, calling Remove(h, i) followed by a Push of the new value.</span>
<span class="token comment">// The complexity is O(log n) where n = h.Len().</span>
<span class="token keyword">func</span> <span class="token function">Fix</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="up" tabindex="-1"><a class="header-anchor" href="#up" aria-hidden="true">#</a> Up</h3><p>上浮这个是重头戏，其实也就是第j个位置跟其父亲，父亲的父亲进行对比，找到合适的位置。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">up</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里的i就是父亲</span>
    i <span class="token operator">:=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment">// parent</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> j <span class="token operator">||</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// i==j 说明找到了顶，也就是位置0处</span>
      <span class="token comment">// !h.Less(j, i) 说明父亲已经不在比孩子小，跳出循环</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 交换数据</span>
    h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
    <span class="token comment">// 向上走</span>
    j <span class="token operator">=</span> i
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="down" tabindex="-1"><a class="header-anchor" href="#down" aria-hidden="true">#</a> down</h3><p>下沉的时候需要注意，其与上浮是不一样的，因为上浮的时候只有一个父亲，所以直接对比就好，但是下沉的时候，会有多种情况。</p><ul><li>没有孩子</li><li>有左孩子，有右孩子</li><li>有左孩子，无右孩子</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>没有左孩子肯定没有右孩子，因为这是根据其完全二叉树特性而存在</p></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">down</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i0<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
  i <span class="token operator">:=</span> i0
  <span class="token keyword">for</span> <span class="token punctuation">{</span>
    <span class="token comment">// 找到左孩子</span>
    j1 <span class="token operator">:=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token comment">// 如果没有左孩子，那就是没孩子</span>
    <span class="token comment">// 或者整数溢出，则直接跳出</span>
    <span class="token keyword">if</span> j1 <span class="token operator">&gt;=</span> n <span class="token operator">||</span> j1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment">// j1 &lt; 0 after int overflow</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这就是左孩子</span>
    j <span class="token operator">:=</span> j1 <span class="token comment">// left child</span>
    <span class="token comment">// j2 := j1 + 1; j2 &lt; n 看看有没有右孩子，</span>
    <span class="token comment">// 因为其弱序性，所以这里还要进行h.Less(j2, j1)判断</span>
    <span class="token keyword">if</span> j2 <span class="token operator">:=</span> j1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j2 <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j2<span class="token punctuation">,</span> j1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j <span class="token operator">=</span> j2 <span class="token comment">// = 2*i + 2  // right child</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 在判断相应的位置是不是正确，因为弱序问题，所以被放到了这里</span>
    <span class="token comment">// 例如左孩子不符合，但是右孩子可以交换</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 交换数据</span>
    h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
    <span class="token comment">// 向下走</span>
    i <span class="token operator">=</span> j
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> i <span class="token operator">&gt;</span> i0
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>想快速掌握<code>Heap</code>，就快点来看源码吧，其与算法4一样，更有利于学习，<code>doug lea</code>大神的代码注释比较少，性能比较高，学习起来难度大。</p><p>核心的<code>api</code>如下：</p><ul><li><code>up</code>上浮</li><li><code>down</code>下沉</li><li><code>堆话heapify</code>其主要在初始化集合时候使用，核心还是<code>down</code></li></ul>`,29);function j(L,P){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,d,n("h2",r,[k,s(),n("a",v,[s("文档地址"),e(a)])]),m,n("h2",h,[b,s(),n("a",f,[s("基础功能排序"),e(a)])]),g,n("h2",x,[w,s(),n("a",y,[s("堆基础功能定义"),e(a)])]),_])}const G=p(l,[["render",j],["__file","heap-go.html.vue"]]);export{G as default};
