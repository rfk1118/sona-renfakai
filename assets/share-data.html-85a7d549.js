const e=JSON.parse(`{"key":"v-82db8aec","path":"/languages/java/jvm/layout/share-data.html","title":"共享数据","lang":"zh-CN","frontmatter":{"description":"共享数据 Heap 官方文档 The Java Virtual Machine has a heap that is shared among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all class instances and arrays is allocated. The heap is created on virtual machine start-up. Heap storage for objects is reclaimed by an automatic storage management system (known as a garbage collector); objects are never explicitly deallocated. The Java Virtual Machine assumes no particular type of automatic storage management system, and the storage management technique may be chosen according to the implementor's system requirements. The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary. The memory for the heap does not need to be contiguous. A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the heap, as well as, if the heap can be dynamically expanded or contracted, control over the maximum and minimum heap size. The following exceptional condition is associated with the heap: • If a computation requires more heap than can be made available by the automatic storage management system, the Java Virtual Machine throws an OutOfMemoryError.","head":[["meta",{"property":"og:url","content":"https://renfakai.com/languages/java/jvm/layout/share-data.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"共享数据"}],["meta",{"property":"og:description","content":"共享数据 Heap 官方文档 The Java Virtual Machine has a heap that is shared among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all class instances and arrays is allocated. The heap is created on virtual machine start-up. Heap storage for objects is reclaimed by an automatic storage management system (known as a garbage collector); objects are never explicitly deallocated. The Java Virtual Machine assumes no particular type of automatic storage management system, and the storage management technique may be chosen according to the implementor's system requirements. The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary. The memory for the heap does not need to be contiguous. A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the heap, as well as, if the heap can be dynamically expanded or contracted, control over the maximum and minimum heap size. The following exceptional condition is associated with the heap: • If a computation requires more heap than can be made available by the automatic storage management system, the Java Virtual Machine throws an OutOfMemoryError."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-12T14:03:48.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-12T14:03:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"共享数据\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-12T14:03:48.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Heap","slug":"heap","link":"#heap","children":[]},{"level":2,"title":"Method-Area","slug":"method-area","link":"#method-area","children":[]},{"level":2,"title":"Run-Time-Constant-Pool","slug":"run-time-constant-pool","link":"#run-time-constant-pool","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697119428000,"updatedTime":1697119428000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":5.87,"words":1761},"filePathRelative":"languages/java/jvm/layout/share-data.md","localizedDate":"2023年10月12日","excerpt":"<h1> 共享数据</h1>\\n<h2> Heap</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">官方文档</p>\\n<p>The Java Virtual Machine has a heap that is shared among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all class instances and arrays is allocated.</p>\\n<p>The heap is created on virtual machine start-up. Heap storage for objects is reclaimed by an automatic storage management system (known as a garbage collector); objects are never explicitly deallocated. The Java Virtual Machine assumes no particular type of automatic storage management system, and the storage management technique may be chosen according to the implementor's system requirements. The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary. The memory for the heap does not need to be contiguous.</p>\\n<p>A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the heap, as well as, if the heap can be dynamically expanded or contracted, control over the maximum and minimum heap size.</p>\\n<p>The following exceptional condition is associated with the heap:\\n• If a computation requires more heap than can be made available by the automatic storage management system, the Java Virtual Machine throws an OutOfMemoryError.</p>\\n</div>","copyright":{},"autoDesc":true}`);export{e as data};
