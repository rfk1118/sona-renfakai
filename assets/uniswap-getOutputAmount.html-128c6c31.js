const n=JSON.parse(`{"key":"v-a444fe2a","path":"/web3/uniswap-getOutputAmount.html","title":"GetOutputAmount","lang":"zh-CN","frontmatter":{"description":"GetOutputAmount 代币兑换使用池子中数据，代码如下： /** * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut. * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000 * has the math deduction for the reserve calculation without fee-on-transfer fees. * * With fee-on-transfer tax, intuitively it's just: * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee * where amountInWithFee is the amountIn after taking out the LP fees * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000) * * But we are illustrating the math deduction below to ensure that's the case. * * before swap A * B = K where A = reserveIn B = reserveOut * * after swap A' * B' = K where only k is a constant value * * getAmountOut * * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000) * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k * = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)) * / * (1 - amountOut.buyFeesBips / 10000) * = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)) * / * (1 - amountOut.buyFeesBips / 10000) * = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)) * / * (1 - amountOut.buyFeesBips / 10000) * = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * / * (1 - amountOut.buyFeesBips / 10000) * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * / * (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * / * (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000 * / * ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000) * = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn * / * (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn) * = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee) * / * (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee) * = (B * inputAmountWithFeeAndTax) * / * (1000 * A + inputAmountWithFeeAndTax) * * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000) * * @param inputAmount */ public getOutputAmount( inputAmount: CurrencyAmount&lt;Token&gt;, calculateFotFees: boolean = false ): [CurrencyAmount&lt;Token&gt;, Pair] { invariant(this.involvesToken(inputAmount.currency), 'TOKEN') if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) { throw new InsufficientReservesError() } const inputReserve = this.reserveOf(inputAmount.currency) const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0) const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT) ? CurrencyAmount.fromRawAmount( inputAmount.currency, percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired ) : inputAmount const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997) const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient) const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax) const outputAmount = CurrencyAmount.fromRawAmount( inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired ) if (JSBI.equal(outputAmount.quotient, ZERO)) { throw new InsufficientInputAmountError() } const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT) ? CurrencyAmount.fromRawAmount( outputAmount.currency, outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired ) : outputAmount if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) { throw new InsufficientInputAmountError() } return [ outputAmountAfterTax, new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)) ] }","head":[["meta",{"property":"og:url","content":"https://renfakai.com/web3/uniswap-getOutputAmount.html"}],["meta",{"property":"og:site_name","content":"天道酬勤"}],["meta",{"property":"og:title","content":"GetOutputAmount"}],["meta",{"property":"og:description","content":"GetOutputAmount 代币兑换使用池子中数据，代码如下： /** * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut. * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000 * has the math deduction for the reserve calculation without fee-on-transfer fees. * * With fee-on-transfer tax, intuitively it's just: * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee * where amountInWithFee is the amountIn after taking out the LP fees * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000) * * But we are illustrating the math deduction below to ensure that's the case. * * before swap A * B = K where A = reserveIn B = reserveOut * * after swap A' * B' = K where only k is a constant value * * getAmountOut * * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000) * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k * = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)) * / * (1 - amountOut.buyFeesBips / 10000) * = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)) * / * (1 - amountOut.buyFeesBips / 10000) * = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)) * / * (1 - amountOut.buyFeesBips / 10000) * = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * / * (1 - amountOut.buyFeesBips / 10000) * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * / * (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * / * (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000 * / * ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000) * = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn * / * (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn) * = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee) * / * (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee) * = (B * inputAmountWithFeeAndTax) * / * (1000 * A + inputAmountWithFeeAndTax) * * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000) * * @param inputAmount */ public getOutputAmount( inputAmount: CurrencyAmount&lt;Token&gt;, calculateFotFees: boolean = false ): [CurrencyAmount&lt;Token&gt;, Pair] { invariant(this.involvesToken(inputAmount.currency), 'TOKEN') if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) { throw new InsufficientReservesError() } const inputReserve = this.reserveOf(inputAmount.currency) const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0) const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT) ? CurrencyAmount.fromRawAmount( inputAmount.currency, percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired ) : inputAmount const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997) const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient) const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax) const outputAmount = CurrencyAmount.fromRawAmount( inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired ) if (JSBI.equal(outputAmount.quotient, ZERO)) { throw new InsufficientInputAmountError() } const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT) ? CurrencyAmount.fromRawAmount( outputAmount.currency, outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired ) : outputAmount if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) { throw new InsufficientInputAmountError() } return [ outputAmountAfterTax, new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)) ] }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-18T12:15:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-18T12:15:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GetOutputAmount\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-18T12:15:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"解读","slug":"解读","link":"#解读","children":[]}],"git":{"createdTime":1697631350000,"updatedTime":1697631350000,"contributors":[{"name":"renfakai","email":"rfk1118@gmail.com","commits":1}]},"readingTime":{"minutes":2.37,"words":710},"filePathRelative":"web3/uniswap-getOutputAmount.md","localizedDate":"2023年10月18日","excerpt":"<h1> GetOutputAmount</h1>\\n<p>代币兑换使用池子中数据，<a href=\\"https://github.com/rfk1118/v2-sdk/blob/main/src/entities/pair.ts\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">代码</a>如下：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code> <span class=\\"token doc-comment comment\\">/**\\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\\n   *\\n   * With fee-on-transfer tax, intuitively it's just:\\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\\n   * where amountInWithFee is the amountIn after taking out the LP fees\\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\\n   *\\n   * But we are illustrating the math deduction below to ensure that's the case.\\n   *\\n   * before swap A * B = K where A = reserveIn B = reserveOut\\n   *\\n   * after swap A' * B' = K where only k is a constant value\\n   *\\n   * getAmountOut\\n   *\\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\\n   *             /\\n   *             (1 - amountOut.buyFeesBips / 10000)\\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\\n   *             /\\n   *             (1 - amountOut.buyFeesBips / 10000)\\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\\n   *             /\\n   *             (1 - amountOut.buyFeesBips / 10000)\\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\\n   *             /\\n   *             (1 - amountOut.buyFeesBips / 10000)\\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\\n   *                                                    /\\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\\n   *\\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\\n   *                       /\\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\\n   *                       /\\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\\n   *                       /\\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\\n   *                       /\\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\\n   *                     = (B * inputAmountWithFeeAndTax)\\n   *                       /\\n   *                       (1000 * A + inputAmountWithFeeAndTax)\\n   *\\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\\n   *\\n   * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">inputAmount</span>\\n   */</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">getOutputAmount</span><span class=\\"token punctuation\\">(</span>\\n    inputAmount<span class=\\"token operator\\">:</span> CurrencyAmount<span class=\\"token operator\\">&lt;</span>Token<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">,</span>\\n    calculateFotFees<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>CurrencyAmount<span class=\\"token operator\\">&lt;</span>Token<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">,</span> Pair<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">invariant</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">involvesToken</span><span class=\\"token punctuation\\">(</span>inputAmount<span class=\\"token punctuation\\">.</span>currency<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'TOKEN'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">JSBI</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>reserve0<span class=\\"token punctuation\\">.</span>quotient<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">ZERO</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token constant\\">JSBI</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>reserve1<span class=\\"token punctuation\\">.</span>quotient<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">ZERO</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">InsufficientReservesError</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">const</span> inputReserve <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">reserveOf</span><span class=\\"token punctuation\\">(</span>inputAmount<span class=\\"token punctuation\\">.</span>currency<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">const</span> outputReserve <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">reserveOf</span><span class=\\"token punctuation\\">(</span>inputAmount<span class=\\"token punctuation\\">.</span>currency<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>token0<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>token1 <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>token0<span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">const</span> percentAfterSellFees <span class=\\"token operator\\">=</span> calculateFotFees <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">derivePercentAfterSellFees</span><span class=\\"token punctuation\\">(</span>inputAmount<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token constant\\">ZERO_PERCENT</span>\\n    <span class=\\"token keyword\\">const</span> inputAmountAfterTax <span class=\\"token operator\\">=</span> percentAfterSellFees<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">greaterThan</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">ZERO_PERCENT</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token operator\\">?</span> CurrencyAmount<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fromRawAmount</span><span class=\\"token punctuation\\">(</span>\\n          inputAmount<span class=\\"token punctuation\\">.</span>currency<span class=\\"token punctuation\\">,</span>\\n          percentAfterSellFees<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">multiply</span><span class=\\"token punctuation\\">(</span>inputAmount<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>quotient <span class=\\"token comment\\">// fraction.quotient will round down by itself, which is desired</span>\\n        <span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token operator\\">:</span> inputAmount\\n\\n    <span class=\\"token keyword\\">const</span> inputAmountWithFeeAndAfterTax <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">JSBI</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">multiply</span><span class=\\"token punctuation\\">(</span>inputAmountAfterTax<span class=\\"token punctuation\\">.</span>quotient<span class=\\"token punctuation\\">,</span> _997<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">const</span> numerator <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">JSBI</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">multiply</span><span class=\\"token punctuation\\">(</span>inputAmountWithFeeAndAfterTax<span class=\\"token punctuation\\">,</span> outputReserve<span class=\\"token punctuation\\">.</span>quotient<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">const</span> denominator <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">JSBI</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">JSBI</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">multiply</span><span class=\\"token punctuation\\">(</span>inputReserve<span class=\\"token punctuation\\">.</span>quotient<span class=\\"token punctuation\\">,</span> _1000<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> inputAmountWithFeeAndAfterTax<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">const</span> outputAmount <span class=\\"token operator\\">=</span> CurrencyAmount<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fromRawAmount</span><span class=\\"token punctuation\\">(</span>\\n      inputAmount<span class=\\"token punctuation\\">.</span>currency<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>token0<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>token1 <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>token0<span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token constant\\">JSBI</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">divide</span><span class=\\"token punctuation\\">(</span>numerator<span class=\\"token punctuation\\">,</span> denominator<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// JSBI.divide will round down by itself, which is desired</span>\\n    <span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">JSBI</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equal</span><span class=\\"token punctuation\\">(</span>outputAmount<span class=\\"token punctuation\\">.</span>quotient<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">ZERO</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">InsufficientInputAmountError</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">const</span> percentAfterBuyFees <span class=\\"token operator\\">=</span> calculateFotFees <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">derivePercentAfterBuyFees</span><span class=\\"token punctuation\\">(</span>outputAmount<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token constant\\">ZERO_PERCENT</span>\\n    <span class=\\"token keyword\\">const</span> outputAmountAfterTax <span class=\\"token operator\\">=</span> percentAfterBuyFees<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">greaterThan</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">ZERO_PERCENT</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token operator\\">?</span> CurrencyAmount<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fromRawAmount</span><span class=\\"token punctuation\\">(</span>\\n          outputAmount<span class=\\"token punctuation\\">.</span>currency<span class=\\"token punctuation\\">,</span>\\n          outputAmount<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">multiply</span><span class=\\"token punctuation\\">(</span>percentAfterBuyFees<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>quotient <span class=\\"token comment\\">// fraction.quotient will round down by itself, which is desired</span>\\n        <span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token operator\\">:</span> outputAmount\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">JSBI</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equal</span><span class=\\"token punctuation\\">(</span>outputAmountAfterTax<span class=\\"token punctuation\\">.</span>quotient<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">ZERO</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">InsufficientInputAmountError</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">[</span>\\n      outputAmountAfterTax<span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Pair</span><span class=\\"token punctuation\\">(</span>inputReserve<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>inputAmountAfterTax<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> outputReserve<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">subtract</span><span class=\\"token punctuation\\">(</span>outputAmountAfterTax<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}`);export{n as data};
