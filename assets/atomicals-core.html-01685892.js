import{_ as p,V as o,W as e,Y as n,a1 as s,Z as t,a0 as c,F as i}from"./framework-e54e0297.js";const l="/assets/satsx-961f98da.png",u="/assets/39eQtZSAxC1DY2RZGq7FDprPaJ8ASawaj5-8fd5145d.png",k="/assets/9570b1927d89db84eecfe3f2079b6f305da6b4dfe2b819824af3f5d7d5d739d1-b529c9d7.png",r={},d=n("h1",{id:"atomicals-core",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#atomicals-core","aria-hidden":"true"},"#"),s(" atomicals-core")],-1),m={href:"https://github.com/atomicals",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/AstroxNetwork/extension",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/unisat-wallet/extension",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.satsx.io/atomicals",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,[n("img",{src:l,alt:"An image"})],-1),y={href:"https://mempool.space/address/39eQtZSAxC1DY2RZGq7FDprPaJ8ASawaj5",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[n("img",{src:u,alt:"An image"})],-1),h={href:"https://mempool.space/tx/9570b1927d89db84eecfe3f2079b6f305da6b4dfe2b819824af3f5d7d5d739d1",target:"_blank",rel:"noopener noreferrer"},x=c('<p><img src="'+k+`" alt="Alt image"></p><p>借此机会好好梳理下btc机制的<code>utxos</code>。</p><h2 id="cli入口" tabindex="-1"><a class="header-anchor" href="#cli入口" aria-hidden="true">#</a> cli入口</h2><p>以领域为demo对代码进行阅读，其他相关也就cli和command不同，底层都一样。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>program<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;mint-realm&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;Mint top level Realm non-fungible token (NFT) Atomical&#39;</span><span class="token punctuation">)</span>
   <span class="token comment">// 域名</span>
  <span class="token punctuation">.</span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;realm&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--initialowner &lt;string&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Initial owner wallet alias to mint the Atomical into&#39;</span><span class="token punctuation">)</span>
   <span class="token comment">// input gas</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--satsbyte &lt;number&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Satoshis per byte in fees&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;15&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// output 最低为546</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--satsoutput &lt;number&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Satoshis to put into the minted atomical&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1000&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--funding &lt;string&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Use wallet alias WIF key to be used for funding and change&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--container &lt;string&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Name of the container to request&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--bitworkc &lt;string&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Whether to put any bitwork proof of work into the token mint. Applies to the commit transaction.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--bitworkr &lt;string&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Whether to put any bitwork proof of work into the token mint. Applies to the reveal transaction.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--parent &lt;string&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Whether to require a parent atomical to be spent along with the mint.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--parentowner &lt;string&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Wallet owner of the parent to spend along with the mint.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--disablechalk&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Whether to disable the real-time chalked logging of each hash for mining. Improvements mining performance to set this flag&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>realm<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
       <span class="token comment">// 验证钱包</span>
      <span class="token keyword">const</span> walletInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">validateWalletStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 验证client，就是验证rpc，这里名字取的不好，因为有Inputs会认为是对输入的参数进行验证</span>
      <span class="token keyword">const</span> config<span class="token operator">:</span> ConfigurationInterface <span class="token operator">=</span> <span class="token function">validateCliInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 创建atomicals客户端</span>
      <span class="token keyword">const</span> atomicals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Atomicals</span><span class="token punctuation">(</span>ElectrumApi<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRUMX_PROXY_BASE_URL</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 初始化钱包</span>
      <span class="token keyword">let</span> initialOwnerAddress <span class="token operator">=</span> <span class="token function">resolveAddress</span><span class="token punctuation">(</span>walletInfo<span class="token punctuation">,</span> options<span class="token punctuation">.</span>initialowner<span class="token punctuation">,</span> walletInfo<span class="token punctuation">.</span>primary<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> parentOwnerRecord <span class="token operator">=</span> <span class="token function">resolveWalletAliasNew</span><span class="token punctuation">(</span>walletInfo<span class="token punctuation">,</span> options<span class="token punctuation">.</span>parentowner<span class="token punctuation">,</span> walletInfo<span class="token punctuation">.</span>primary<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> fundingRecord <span class="token operator">=</span> <span class="token function">resolveWalletAliasNew</span><span class="token punctuation">(</span>walletInfo<span class="token punctuation">,</span> options<span class="token punctuation">.</span>funding<span class="token punctuation">,</span> walletInfo<span class="token punctuation">.</span>funding<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 进行域名注册</span>
      <span class="token keyword">const</span> result<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">await</span> atomicals<span class="token punctuation">.</span><span class="token function">mintRealmInteractive</span><span class="token punctuation">(</span>realm<span class="token punctuation">,</span> initialOwnerAddress<span class="token punctuation">,</span> fundingRecord<span class="token punctuation">.</span><span class="token constant">WIF</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        meta<span class="token operator">:</span> options<span class="token punctuation">.</span>meta<span class="token punctuation">,</span>
        ctx<span class="token operator">:</span> options<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span>
        init<span class="token operator">:</span> options<span class="token punctuation">.</span>init<span class="token punctuation">,</span>
        satsbyte<span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>satsbyte<span class="token punctuation">)</span><span class="token punctuation">,</span>
        satsoutput<span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>satsoutput<span class="token punctuation">)</span><span class="token punctuation">,</span>
        container<span class="token operator">:</span> options<span class="token punctuation">.</span>container<span class="token punctuation">,</span>
        bitworkc<span class="token operator">:</span> options<span class="token punctuation">.</span>bitworkc <span class="token operator">?</span> options<span class="token punctuation">.</span>bitworkc <span class="token operator">:</span> <span class="token function">getRandomBitwork4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        bitworkr<span class="token operator">:</span> options<span class="token punctuation">.</span>bitworkr<span class="token punctuation">,</span>
        parent<span class="token operator">:</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">,</span>
        parentOwner<span class="token operator">:</span> parentOwnerRecord<span class="token punctuation">,</span>
        disableMiningChalk<span class="token operator">:</span> options<span class="token punctuation">.</span>disablechalk
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">handleResultLogging</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mintrealminteractive" tabindex="-1"><a class="header-anchor" href="#mintrealminteractive" aria-hidden="true">#</a> mintRealmInteractive</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token keyword">async</span> <span class="token function">mintRealmInteractive</span><span class="token punctuation">(</span>requestRealm<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">WIF</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> options<span class="token operator">:</span> BaseRequestOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>CommandResultInterface<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 相当于线程池打开</span>
      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>electrumApi<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 创建command</span>
      <span class="token keyword">const</span> command<span class="token operator">:</span> CommandInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MintInteractiveRealmCommand</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>electrumApi<span class="token punctuation">,</span> requestRealm<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token constant">WIF</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 进行执行</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> command<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        error
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token comment">// 相当于关闭打开</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>electrumApi<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mintinteractiverealmcommand" tabindex="-1"><a class="header-anchor" href="#mintinteractiverealmcommand" aria-hidden="true">#</a> MintInteractiveRealmCommand</h2><p>所有cli也就此处和上面不一致，下面<code>AtomicalOperationBuilder</code>为通用代码。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MintInteractiveRealmCommand</span> <span class="token keyword">implements</span> <span class="token class-name">CommandInterface</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> electrumApi<span class="token operator">:</span> ElectrumApiInterface<span class="token punctuation">,</span>
    <span class="token keyword">private</span> requestRealm<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">private</span> address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">private</span> fundingWIF<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">private</span> options<span class="token operator">:</span> BaseRequestOptions
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token function">checkBaseRequestOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>requestRealm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestRealm<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestRealm<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestRealm<span class="token punctuation">;</span>
    <span class="token function">isValidBitworkMinimum</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>bitworkc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Check if the request already exists</span>
    <span class="token comment">// 从proxy拉取改名字是不是存在</span>
    <span class="token keyword">const</span> getExistingNameCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetByRealmCommand</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>electrumApi<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestRealm<span class="token punctuation">,</span> AtomicalsGetFetchType<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果存在，不允许在注册</span>
      <span class="token keyword">const</span> getExistingNameResult <span class="token operator">=</span> <span class="token keyword">await</span> getExistingNameCommand<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>getExistingNameResult<span class="token punctuation">.</span>success <span class="token operator">&amp;&amp;</span> getExistingNameResult<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>getExistingNameResult<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result <span class="token operator">&amp;&amp;</span> getExistingNameResult<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result<span class="token punctuation">.</span>atomical_id <span class="token operator">||</span> getExistingNameResult<span class="token punctuation">.</span>data<span class="token punctuation">.</span>candidates<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token string">&#39;Already exists with that name. Try a different name.&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token comment">// Code 1 means call correctly returned that it was not found</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建tx builder</span>
    <span class="token keyword">const</span> atomicalBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicalOperationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      electrumApi<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>electrumApi<span class="token punctuation">,</span>
      satsbyte<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>satsbyte<span class="token punctuation">,</span>
      address<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">,</span>
      disableMiningChalk<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>disableMiningChalk<span class="token punctuation">,</span>
      opType<span class="token operator">:</span> <span class="token string">&#39;nft&#39;</span><span class="token punctuation">,</span>
      nftOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
        satsoutput<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>satsoutput <span class="token keyword">as</span> <span class="token builtin">any</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      meta<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>meta<span class="token punctuation">,</span>
      ctx<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span>
      init<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>init<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Set to request a container</span>
    <span class="token comment">// 设置域名</span>
    atomicalBuilder<span class="token punctuation">.</span><span class="token function">setRequestRealm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Attach a container request</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>container<span class="token punctuation">)</span>
    <span class="token comment">// 如果是容器设置关系</span>
      atomicalBuilder<span class="token punctuation">.</span><span class="token function">setContainerMembership</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Attach any requested bitwork</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>bitworkc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 设置btcWork</span>
      atomicalBuilder<span class="token punctuation">.</span><span class="token function">setBitworkCommit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>bitworkc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 下面两个暂时不处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>bitworkr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      atomicalBuilder<span class="token punctuation">.</span><span class="token function">setBitworkReveal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>bitworkr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      atomicalBuilder<span class="token punctuation">.</span><span class="token function">setInputParent</span><span class="token punctuation">(</span><span class="token keyword">await</span> AtomicalOperationBuilder<span class="token punctuation">.</span><span class="token function">resolveInputParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>electrumApi<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>parentOwner <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// The receiver output</span>
    <span class="token comment">// 增加接收数据的地址和satsoutput</span>
    atomicalBuilder<span class="token punctuation">.</span><span class="token function">addOutput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      address<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>satsoutput <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token operator">||</span> <span class="token number">1000</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开始进行pow计算</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> atomicalBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fundingWIF<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> result
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印builder</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>AtomicalOperationBuilder <span class="token punctuation">{</span>
  options<span class="token operator">:</span> <span class="token punctuation">{</span>
    electrumApi<span class="token operator">:</span> ElectrumApi <span class="token punctuation">{</span>
      baseUrl<span class="token operator">:</span> <span class="token string">&#39;https://ep.atomicals.xyz/proxy&#39;</span><span class="token punctuation">,</span>
      usePost<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      isOpenFlag<span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    satsbyte<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
    address<span class="token operator">:</span> <span class="token punctuation">{</span>
      childNode<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">BIP32</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      address<span class="token operator">:</span> <span class="token string">&#39;删除掉了&#39;</span><span class="token punctuation">,</span>
      <span class="token constant">WIF</span><span class="token operator">:</span> <span class="token string">&#39;这里删除掉了&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    disableMiningChalk<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    opType<span class="token operator">:</span> <span class="token string">&#39;nft&#39;</span><span class="token punctuation">,</span>
    nftOptions<span class="token operator">:</span> <span class="token punctuation">{</span> satsoutput<span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    meta<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    ctx<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    init<span class="token operator">:</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  userDefinedData<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  containerMembership<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  bitworkInfoCommit<span class="token operator">:</span> <span class="token punctuation">{</span>
    input_bitwork<span class="token operator">:</span> <span class="token string">&#39;5487&#39;</span><span class="token punctuation">,</span>
    hex_bitwork<span class="token operator">:</span> <span class="token string">&#39;5487&#39;</span><span class="token punctuation">,</span>
    prefix<span class="token operator">:</span> <span class="token string">&#39;5487&#39;</span><span class="token punctuation">,</span>
    ext<span class="token operator">:</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  bitworkInfoReveal<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  requestName<span class="token operator">:</span> <span class="token string">&#39;iiifewifiw99few9ef9&#39;</span><span class="token punctuation">,</span>
  requestSubrealmPid<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  requestNameType<span class="token operator">:</span> <span class="token string">&#39;REALM&#39;</span><span class="token punctuation">,</span>
  meta<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  args<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  init<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  ctx<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  parentInputAtomical<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  inputUtxos<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  additionalOutputs<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> address<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码" aria-hidden="true">#</a> 核心代码</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span>fundingWIF<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用钱包的私钥创建钱包</span>
        <span class="token keyword">const</span> fundingKeypairRaw <span class="token operator">=</span> ECPair<span class="token punctuation">.</span><span class="token function">fromWIF</span><span class="token punctuation">(</span>fundingWIF<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取钱包地址和私钥</span>
        <span class="token keyword">const</span> fundingKeypair <span class="token operator">=</span> <span class="token function">getKeypairInfo</span><span class="token punctuation">(</span>fundingKeypairRaw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// performBitworkForRevealTx:false</span>
        <span class="token comment">// performBitworkForCommitTx:true</span>
        <span class="token keyword">let</span> performBitworkForRevealTx <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoReveal<span class="token punctuation">;</span>
        <span class="token keyword">let</span> performBitworkForCommitTx <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoCommit<span class="token punctuation">;</span>
        <span class="token keyword">let</span> scriptP2TR<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> hashLockP2TR<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

         <span class="token comment">// 暂时不知后续补充</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMeta</span><span class="token punctuation">(</span><span class="token keyword">await</span> AtomicalOperationBuilder<span class="token punctuation">.</span><span class="token function">getDataObjectFromStringTypeHints</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>init<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setInit</span><span class="token punctuation">(</span><span class="token keyword">await</span> AtomicalOperationBuilder<span class="token punctuation">.</span><span class="token function">getDataObjectFromStringTypeHints</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>init<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCtx</span><span class="token punctuation">(</span><span class="token keyword">await</span> AtomicalOperationBuilder<span class="token punctuation">.</span><span class="token function">getDataObjectFromStringTypeHints</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> copiedData <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userDefinedData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>


        <span class="token comment">// 一些元数据</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCtx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;ctx&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCtx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMeta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;meta&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMeta</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;init&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// If it&#39;s a container membership request, add it in</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>containerMembership<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;in&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[&quot;#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>containerMembership<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment">// 根据币，领域，子领域，容器修改参数</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestNameType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">REQUEST_NAME_TYPE</span><span class="token punctuation">.</span><span class="token constant">TICKER</span><span class="token operator">:</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;request_ticker&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestName<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">REQUEST_NAME_TYPE</span><span class="token punctuation">.</span><span class="token constant">REALM</span><span class="token operator">:</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;request_realm&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestName<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">REQUEST_NAME_TYPE</span><span class="token punctuation">.</span><span class="token constant">SUBREALM</span><span class="token operator">:</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;request_subrealm&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestName<span class="token punctuation">;</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;parent_realm&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestSubrealmPid<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">REQUEST_NAME_TYPE</span><span class="token punctuation">.</span><span class="token constant">CONTAINER</span><span class="token operator">:</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;request_container&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestName<span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>performBitworkForCommitTx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;bitworkc&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoCommit<span class="token operator">?.</span>hex_bitwork<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>performBitworkForRevealTx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;bitworkr&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoReveal<span class="token operator">?.</span>hex_bitwork
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>opType <span class="token operator">===</span> <span class="token string">&#39;dmt&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;mint_ticker&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>dmtOptions<span class="token operator">?.</span>ticker<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> parentAtomicalInfo<span class="token operator">:</span> ParentInputAtomical <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInputParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parentAtomicalInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;parents&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>parentAtomicalInfo<span class="token punctuation">.</span>parentId<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Also supports one parent for now</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//parentAtomicalInfo = null;</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Payload Encoded: &#39;</span><span class="token punctuation">,</span> copiedData<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> unixtime <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> nonce <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> noncesGenerated <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> atomicalId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> commitTxid<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> revealTxid<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> commitMinedWithBitwork <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// copiedData = { args: { request_realm: &#39;iiifewifiw99few9ef9&#39;, bitworkc: &#39;8563&#39; } }</span>
        <span class="token comment">// 打印二维码 这里是与预计算，正常为pre - process - end</span>
        <span class="token keyword">const</span> mockAtomPayload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicalsPayload</span><span class="token punctuation">(</span>copiedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// scriptP2TR  hashLockP2TR</span>
        <span class="token keyword">const</span> mockBaseCommitForFeeCalculation<span class="token operator">:</span> <span class="token punctuation">{</span> scriptP2TR<span class="token punctuation">,</span> hashLockP2TR <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">prepareCommitRevealConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>opType<span class="token punctuation">,</span> fundingKeypair<span class="token punctuation">,</span> mockAtomPayload<span class="token punctuation">)</span>
        <span class="token comment">// 计算费用</span>
        <span class="token keyword">const</span> fees<span class="token operator">:</span> FeeCalculations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateFeesRequiredForAccumulatedCommitAndReveal</span><span class="token punctuation">(</span>mockBaseCommitForFeeCalculation<span class="token punctuation">.</span>hashLockP2TR<span class="token punctuation">.</span>redeem<span class="token punctuation">.</span>output<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">////////////////////////////////////////////////////////////////////////</span>
        <span class="token comment">// Begin Reveal Transaction 开始pow计算</span>
        <span class="token comment">////////////////////////////////////////////////////////////////////////</span>
        <span class="token comment">// 执行提交tx，请求这里的时候没有开启</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>performBitworkForCommitTx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行这里</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;nonce&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9999999</span><span class="token punctuation">;</span> <span class="token comment">// placeholder for only estimating tx deposit fee size</span>
            copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;time&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> unixtime<span class="token punctuation">;</span> <span class="token comment">// placeholder for only estimating tx deposit fee size</span>
            <span class="token comment">// 会等待有Outputs费用才向下执行</span>
            <span class="token keyword">const</span> fundingUtxo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFundingUtxo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>electrumApi<span class="token punctuation">,</span> fundingKeypair<span class="token punctuation">.</span>address<span class="token punctuation">,</span> fees<span class="token punctuation">.</span>commitAndRevealFeePlusOutputs<span class="token punctuation">)</span>
            <span class="token comment">// 打印提交信息</span>
            <span class="token function">printBitworkLog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoCommit <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 关闭api</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>electrumApi<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 开始循环</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;nonce&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nonce<span class="token punctuation">;</span>
                <span class="token comment">//  每生成5000次更新下unixtime</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>noncesGenerated <span class="token operator">%</span> <span class="token number">5000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    unixtime <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span>
                    copiedData<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;time&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> unixtime<span class="token punctuation">;</span>
                    <span class="token comment">// 随机一个nonce</span>
                    nonce <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    nonce<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 这里和上面的预计算没有区别，例如正常情况下gas为2，但是这个会实时变动，所以每次都重新计算</span>
                <span class="token keyword">const</span> atomPayload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicalsPayload</span><span class="token punctuation">(</span>copiedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> updatedBaseCommit<span class="token operator">:</span> <span class="token punctuation">{</span> scriptP2TR<span class="token punctuation">,</span> hashLockP2TR<span class="token punctuation">,</span> hashscript <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">prepareCommitRevealConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>opType<span class="token punctuation">,</span> fundingKeypair<span class="token punctuation">,</span> atomPayload<span class="token punctuation">)</span>
                <span class="token comment">// new bitcoin.Psbt ？ 这里就是构建tx</span>
                <span class="token keyword">let</span> psbtStart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Psbt</span><span class="token punctuation">(</span><span class="token punctuation">{</span> network<span class="token operator">:</span> <span class="token constant">NETWORK</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                psbtStart<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 增加输入</span>
                psbtStart<span class="token punctuation">.</span><span class="token function">addInput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    hash<span class="token operator">:</span> fundingUtxo<span class="token punctuation">.</span>txid<span class="token punctuation">,</span>
                    index<span class="token operator">:</span> fundingUtxo<span class="token punctuation">.</span>index<span class="token punctuation">,</span>
                    witnessUtxo<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> fundingUtxo<span class="token punctuation">.</span>value<span class="token punctuation">,</span> script<span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>fundingKeypair<span class="token punctuation">.</span>output<span class="token punctuation">,</span> <span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    tapInternalKey<span class="token operator">:</span> fundingKeypair<span class="token punctuation">.</span>childNodeXOnlyPubkey<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 增加输出</span>
                psbtStart<span class="token punctuation">.</span><span class="token function">addOutput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    address<span class="token operator">:</span> updatedBaseCommit<span class="token punctuation">.</span>scriptP2TR<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                    value<span class="token operator">:</span> fees<span class="token punctuation">.</span>revealFeePlusOutputs
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 打印提交CommitChangeOutputIfRequired数，我就是改了这里的check，然后悲剧了</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCommitChangeOutputIfRequired</span><span class="token punctuation">(</span>fundingUtxo<span class="token punctuation">.</span>value<span class="token punctuation">,</span> fees<span class="token punctuation">,</span> psbtStart<span class="token punctuation">,</span> fundingKeypair<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 签名输入</span>
                psbtStart<span class="token punctuation">.</span><span class="token function">signInput</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fundingKeypair<span class="token punctuation">.</span>tweakedChildNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                psbtStart<span class="token punctuation">.</span><span class="token function">finalizeAllInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">let</span> prelimTx <span class="token operator">=</span> psbtStart<span class="token punctuation">.</span><span class="token function">extractTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> checkTxid <span class="token operator">=</span> prelimTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token function">logMiningProgressToConsole</span><span class="token punctuation">(</span>performBitworkForCommitTx<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>disableMiningChalk<span class="token punctuation">,</span> checkTxid<span class="token punctuation">,</span> noncesGenerated<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// add a \`true ||\` at the front to test invalid minting</span>
                <span class="token comment">// console.log(&#39;this.bitworkInfoCommit?.prefix&#39;, this.bitworkInfoCommit)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>performBitworkForCommitTx <span class="token operator">&amp;&amp;</span> <span class="token function">hasValidBitwork</span><span class="token punctuation">(</span>checkTxid<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoCommit<span class="token operator">?.</span>prefix <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoCommit<span class="token operator">?.</span>ext <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 清楚process</span>
                    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">clearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">cursorTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span>checkTxid<span class="token punctuation">,</span> <span class="token string">&#39; nonces: &#39;</span> <span class="token operator">+</span> noncesGenerated<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\nBitwork matches commit txid! &#39;</span><span class="token punctuation">,</span> prelimTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;@ time: &#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token comment">// We found a solution, therefore broadcast it</span>
                    <span class="token keyword">const</span> interTx <span class="token operator">=</span> psbtStart<span class="token punctuation">.</span><span class="token function">extractTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">const</span> rawtx <span class="token operator">=</span> interTx<span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//</span>
                    AtomicalOperationBuilder<span class="token punctuation">.</span><span class="token function">finalSafetyCheckForExcessiveFee</span><span class="token punctuation">(</span>psbtStart<span class="token punctuation">,</span> interTx<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 广播内容</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">broadcastWithRetries</span><span class="token punctuation">(</span>rawtx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 多次广播失败，这里有retry机制</span>
                        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error sending&#39;</span><span class="token punctuation">,</span> prelimTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rawtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Unable to broadcast commit transaction after attempts: &#39;</span> <span class="token operator">+</span> prelimTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Success sent tx: &#39;</span><span class="token punctuation">,</span> prelimTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 不在循环，进行提交</span>
                    commitMinedWithBitwork <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    performBitworkForCommitTx <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// In both scenarios we copy over the args</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>performBitworkForCommitTx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    scriptP2TR <span class="token operator">=</span> updatedBaseCommit<span class="token punctuation">.</span>scriptP2TR
                    hashLockP2TR <span class="token operator">=</span> updatedBaseCommit<span class="token punctuation">.</span>hashLockP2TR<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                noncesGenerated<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>performBitworkForCommitTx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> baseCommit<span class="token operator">:</span> <span class="token punctuation">{</span> scriptP2TR<span class="token punctuation">,</span> hashLockP2TR <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">prepareCommitRevealConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>opType<span class="token punctuation">,</span> fundingKeypair<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicalsPayload</span><span class="token punctuation">(</span>copiedData<span class="token punctuation">)</span><span class="token punctuation">)</span>
            scriptP2TR <span class="token operator">=</span> baseCommit<span class="token punctuation">.</span>scriptP2TR<span class="token punctuation">;</span>
            hashLockP2TR <span class="token operator">=</span> baseCommit<span class="token punctuation">.</span>hashLockP2TR<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">////////////////////////////////////////////////////////////////////////</span>
        <span class="token comment">// Begin Reveal Transaction</span>
        <span class="token comment">////////////////////////////////////////////////////////////////////////</span>

        <span class="token comment">// The scriptP2TR and hashLockP2TR will contain the utxo needed for the commit and now can be revealed</span>
        <span class="token keyword">const</span> utxoOfCommitAddress <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFundingUtxo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>electrumApi<span class="token punctuation">,</span> scriptP2TR<span class="token punctuation">.</span>address<span class="token punctuation">,</span> fees<span class="token punctuation">.</span>revealFeePlusOutputs <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> commitMinedWithBitwork<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        commitTxid <span class="token operator">=</span> utxoOfCommitAddress<span class="token punctuation">.</span>txid<span class="token punctuation">;</span>
        atomicalId <span class="token operator">=</span> commitTxid <span class="token operator">+</span> <span class="token string">&#39;i0&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Atomicals are always minted at the 0&#39;th output</span>

        <span class="token keyword">const</span> tapLeafScript <span class="token operator">=</span> <span class="token punctuation">{</span>
            leafVersion<span class="token operator">:</span> hashLockP2TR<span class="token punctuation">.</span>redeem<span class="token punctuation">.</span>redeemVersion<span class="token punctuation">,</span>
            script<span class="token operator">:</span> hashLockP2TR<span class="token punctuation">.</span>redeem<span class="token punctuation">.</span>output<span class="token punctuation">,</span>
            controlBlock<span class="token operator">:</span> hashLockP2TR<span class="token punctuation">.</span>witness<span class="token operator">!</span><span class="token punctuation">[</span>hashLockP2TR<span class="token punctuation">.</span>witness<span class="token operator">!</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>performBitworkForRevealTx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printBitworkLog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoReveal <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        noncesGenerated <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> totalInputsforReveal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// We calculate the total inputs for the reveal to determine to make change output or not</span>
            <span class="token keyword">let</span> totalOutputsForReveal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Calculate total outputs for the reveal and compare to totalInputsforReveal and reveal fee</span>
            <span class="token keyword">let</span> nonce <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> unixTime <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span>
            <span class="token keyword">let</span> psbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Psbt</span><span class="token punctuation">(</span><span class="token punctuation">{</span> network<span class="token operator">:</span> <span class="token constant">NETWORK</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            psbt<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            psbt<span class="token punctuation">.</span><span class="token function">addInput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                hash<span class="token operator">:</span> utxoOfCommitAddress<span class="token punctuation">.</span>txid<span class="token punctuation">,</span>
                index<span class="token operator">:</span> utxoOfCommitAddress<span class="token punctuation">.</span>vout<span class="token punctuation">,</span>
                witnessUtxo<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> utxoOfCommitAddress<span class="token punctuation">.</span>value<span class="token punctuation">,</span> script<span class="token operator">:</span> hashLockP2TR<span class="token punctuation">.</span>output<span class="token operator">!</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                tapLeafScript<span class="token operator">:</span> <span class="token punctuation">[</span>
                    tapLeafScript
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 所有余额</span>
            totalInputsforReveal <span class="token operator">+=</span> utxoOfCommitAddress<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

            <span class="token comment">// Add any additional inputs that were assigned</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> additionalInput <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputUtxos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                psbt<span class="token punctuation">.</span><span class="token function">addInput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    hash<span class="token operator">:</span> additionalInput<span class="token punctuation">.</span>utxo<span class="token punctuation">.</span>hash<span class="token punctuation">,</span>
                    index<span class="token operator">:</span> additionalInput<span class="token punctuation">.</span>utxo<span class="token punctuation">.</span>index<span class="token punctuation">,</span>
                    witnessUtxo<span class="token operator">:</span> additionalInput<span class="token punctuation">.</span>utxo<span class="token punctuation">.</span>witnessUtxo<span class="token punctuation">,</span>
                    tapInternalKey<span class="token operator">:</span> additionalInput<span class="token punctuation">.</span>keypairInfo<span class="token punctuation">.</span>childNodeXOnlyPubkey
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                totalInputsforReveal <span class="token operator">+=</span> additionalInput<span class="token punctuation">.</span>utxo<span class="token punctuation">.</span>witnessUtxo<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Note, we do not assign any outputs by default.</span>
            <span class="token comment">// The caller must decide how many outputs to assign always</span>
            <span class="token comment">// The reason is the caller knows the context to create them in</span>
            <span class="token comment">// Add any additional outputs that were assigned</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> additionalOutput <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>additionalOutputs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                psbt<span class="token punctuation">.</span><span class="token function">addOutput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    address<span class="token operator">:</span> additionalOutput<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                    value<span class="token operator">:</span> additionalOutput<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                totalOutputsForReveal <span class="token operator">+=</span> additionalOutput<span class="token punctuation">.</span>value
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>parentAtomicalInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                psbt<span class="token punctuation">.</span><span class="token function">addInput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    hash<span class="token operator">:</span> parentAtomicalInfo<span class="token punctuation">.</span>parentUtxoPartial<span class="token punctuation">.</span>hash<span class="token punctuation">,</span>
                    index<span class="token operator">:</span> parentAtomicalInfo<span class="token punctuation">.</span>parentUtxoPartial<span class="token punctuation">.</span>index<span class="token punctuation">,</span>
                    witnessUtxo<span class="token operator">:</span> parentAtomicalInfo<span class="token punctuation">.</span>parentUtxoPartial<span class="token punctuation">.</span>witnessUtxo<span class="token punctuation">,</span>
                    tapInternalKey<span class="token operator">:</span> parentAtomicalInfo<span class="token punctuation">.</span>parentKeyInfo<span class="token punctuation">.</span>childNodeXOnlyPubkey
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                totalInputsforReveal <span class="token operator">+=</span> parentAtomicalInfo<span class="token punctuation">.</span>parentUtxoPartial<span class="token punctuation">.</span>witnessUtxo<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                psbt<span class="token punctuation">.</span><span class="token function">addOutput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    address<span class="token operator">:</span> parentAtomicalInfo<span class="token punctuation">.</span>parentKeyInfo<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                    value<span class="token operator">:</span> parentAtomicalInfo<span class="token punctuation">.</span>parentUtxoPartial<span class="token punctuation">.</span>witnessUtxo<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                totalOutputsForReveal <span class="token operator">+=</span> parentAtomicalInfo<span class="token punctuation">.</span>parentUtxoPartial<span class="token punctuation">.</span>witnessUtxo<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>noncesGenerated <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                unixTime <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">const</span> data <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>unixTime <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span> nonce<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> embed <span class="token operator">=</span> bitcoin<span class="token punctuation">.</span>payments<span class="token punctuation">.</span><span class="token function">embed</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token operator">:</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>performBitworkForRevealTx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                psbt<span class="token punctuation">.</span><span class="token function">addOutput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    script<span class="token operator">:</span> embed<span class="token punctuation">.</span>output<span class="token operator">!</span><span class="token punctuation">,</span>
                    value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addRevealOutputIfChangeRequired</span><span class="token punctuation">(</span>totalInputsforReveal<span class="token punctuation">,</span> totalOutputsForReveal<span class="token punctuation">,</span> fees<span class="token punctuation">.</span>revealFeeOnly<span class="token punctuation">,</span> fundingKeypair<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>

            psbt<span class="token punctuation">.</span><span class="token function">signInput</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fundingKeypair<span class="token punctuation">.</span>childNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Sign all the additional inputs, if there were any</span>
            <span class="token keyword">let</span> signInputIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> additionalInput <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputUtxos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                psbt<span class="token punctuation">.</span><span class="token function">signInput</span><span class="token punctuation">(</span>signInputIndex<span class="token punctuation">,</span> additionalInput<span class="token punctuation">.</span>keypairInfo<span class="token punctuation">.</span>tweakedChildNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                signInputIndex<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>parentAtomicalInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;parentAtomicalInfo&#39;</span><span class="token punctuation">,</span> parentAtomicalInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                psbt<span class="token punctuation">.</span><span class="token function">signInput</span><span class="token punctuation">(</span>signInputIndex<span class="token punctuation">,</span> parentAtomicalInfo<span class="token punctuation">.</span>parentKeyInfo<span class="token punctuation">.</span>tweakedChildNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// We have to construct our witness script in a custom finalizer</span>
            <span class="token keyword">const</span> <span class="token function-variable function">customFinalizer</span> <span class="token operator">=</span> <span class="token punctuation">(</span>_inputIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> scriptSolution <span class="token operator">=</span> <span class="token punctuation">[</span>
                    input<span class="token punctuation">.</span>tapScriptSig<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>signature<span class="token punctuation">,</span>
                <span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> witness <span class="token operator">=</span> scriptSolution
                    <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>tapLeafScript<span class="token punctuation">.</span>script<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>tapLeafScript<span class="token punctuation">.</span>controlBlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span>
                    finalScriptWitness<span class="token operator">:</span> <span class="token function">witnessStackToScriptWitness</span><span class="token punctuation">(</span>witness<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            psbt<span class="token punctuation">.</span><span class="token function">finalizeInput</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> customFinalizer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Finalize all the additional inputs, if there were any</span>
            <span class="token keyword">let</span> finalizeInputIndex <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> finalizeInputIndex <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputUtxos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> finalizeInputIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                psbt<span class="token punctuation">.</span><span class="token function">finalizeInput</span><span class="token punctuation">(</span>finalizeInputIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>parentAtomicalInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                psbt<span class="token punctuation">.</span><span class="token function">finalizeInput</span><span class="token punctuation">(</span>finalizeInputIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">const</span> revealTx <span class="token operator">=</span> psbt<span class="token punctuation">.</span><span class="token function">extractTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> checkTxid <span class="token operator">=</span> revealTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">logMiningProgressToConsole</span><span class="token punctuation">(</span>performBitworkForRevealTx<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>disableMiningChalk<span class="token punctuation">,</span> checkTxid<span class="token punctuation">,</span> noncesGenerated<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> shouldBroadcast <span class="token operator">=</span> <span class="token operator">!</span>performBitworkForRevealTx<span class="token punctuation">;</span>
            <span class="token comment">// 执行tx准备工作成果，并且矿工有效</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>performBitworkForRevealTx <span class="token operator">&amp;&amp;</span> <span class="token function">hasValidBitwork</span><span class="token punctuation">(</span>checkTxid<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoReveal<span class="token operator">?.</span>prefix <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitworkInfoReveal<span class="token operator">?.</span>ext <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// node js process ? 后续看下这个功能</span>
                process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">clearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">cursorTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span>checkTxid<span class="token punctuation">,</span> <span class="token string">&#39; nonces: &#39;</span> <span class="token operator">+</span> noncesGenerated<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\nBitwork matches reveal txid! &#39;</span><span class="token punctuation">,</span> revealTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;@ time: &#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 执行广播</span>
                shouldBroadcast <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// Broadcast either because there was no bitwork requested, and we are done. OR...</span>
            <span class="token comment">// broadcast because we found the bitwork and it is ready to be broadcasted</span>
            <span class="token comment">// 如果需要广播</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldBroadcast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                AtomicalOperationBuilder<span class="token punctuation">.</span><span class="token function">finalSafetyCheckForExcessiveFee</span><span class="token punctuation">(</span>psbt<span class="token punctuation">,</span> revealTx<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\nBroadcasting tx...&#39;</span><span class="token punctuation">,</span> revealTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">const</span> interTx <span class="token operator">=</span> psbt<span class="token punctuation">.</span><span class="token function">extractTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> rawtx <span class="token operator">=</span> interTx<span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">broadcastWithRetries</span><span class="token punctuation">(</span>rawtx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error sending&#39;</span><span class="token punctuation">,</span> revealTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rawtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Unable to broadcast reveal transaction after attempts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Success sent tx: &#39;</span><span class="token punctuation">,</span> revealTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                revealTxid <span class="token operator">=</span> interTx<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 多次广播失败或者成功后</span>
                performBitworkForRevealTx <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// Done</span>
            <span class="token punctuation">}</span>
            nonce<span class="token operator">++</span><span class="token punctuation">;</span>
            noncesGenerated<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>performBitworkForRevealTx<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 返回结果，就是返回一个结果</span>
        <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span>
            success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            data<span class="token operator">:</span> <span class="token punctuation">{</span>
                commitTxid<span class="token punctuation">,</span>
                revealTxid
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果nft，ft，ft增加atomicalId</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>opType <span class="token operator">===</span> <span class="token string">&#39;nft&#39;</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>opType <span class="token operator">===</span> <span class="token string">&#39;ft&#39;</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>opType <span class="token operator">===</span> <span class="token string">&#39;dft&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ret<span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;atomicalId&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> atomicalId<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="费用计算" tabindex="-1"><a class="header-anchor" href="#费用计算" aria-hidden="true">#</a> 费用计算</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">calculateFeesRequiredForAccumulatedCommitAndReveal</span><span class="token punctuation">(</span>
    hashLockP2TROutputLen<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> FeeCalculations <span class="token punctuation">{</span>
    <span class="token comment">// 5970</span>
    <span class="token keyword">const</span> revealFee <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateAmountRequiredForReveal</span><span class="token punctuation">(</span>
      hashLockP2TROutputLen
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2880</span>
    <span class="token keyword">const</span> commitFee <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateFeesRequiredForCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  5970 + 2880</span>
    <span class="token keyword">const</span> commitAndRevealFee <span class="token operator">=</span> commitFee <span class="token operator">+</span> revealFee<span class="token punctuation">;</span>
    <span class="token keyword">const</span> commitAndRevealFeePlusOutputs <span class="token operator">=</span>
      <span class="token comment">// 1000</span>
      commitFee <span class="token operator">+</span> revealFee <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">totalOutputSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  5970 + 1000</span>
    <span class="token keyword">const</span> revealFeePlusOutputs <span class="token operator">=</span> revealFee <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">totalOutputSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span>
      commitAndRevealFee<span class="token punctuation">,</span>
      commitAndRevealFeePlusOutputs<span class="token punctuation">,</span>
      revealFeePlusOutputs<span class="token punctuation">,</span>
      commitFeeOnly<span class="token operator">:</span> commitFee<span class="token punctuation">,</span>
      revealFeeOnly<span class="token operator">:</span> revealFee<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  commitAndRevealFee<span class="token operator">:</span> <span class="token number">8850</span><span class="token punctuation">,</span>
  commitAndRevealFeePlusOutputs<span class="token operator">:</span> <span class="token number">9850</span><span class="token punctuation">,</span>
  revealFeePlusOutputs<span class="token operator">:</span> <span class="token number">6970</span><span class="token punctuation">,</span>
  commitFeeOnly<span class="token operator">:</span> <span class="token number">2880</span><span class="token punctuation">,</span>
  revealFeeOnly<span class="token operator">:</span> <span class="token number">5970</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="addcommitchangeoutputifrequired" tabindex="-1"><a class="header-anchor" href="#addcommitchangeoutputifrequired" aria-hidden="true">#</a> addCommitChangeOutputIfRequired</h2><p>这个方法瞎改改出问题了。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">addCommitChangeOutputIfRequired</span><span class="token punctuation">(</span>
    extraInputValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    fee<span class="token operator">:</span> FeeCalculations<span class="token punctuation">,</span>
    pbst<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
    address<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token string">&quot;addCommitChangeOutputIfRequired&quot;</span><span class="token punctuation">,</span>
      extraInputValue<span class="token punctuation">,</span>
      fee<span class="token punctuation">,</span>
      address
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> totalInputsValue <span class="token operator">=</span>
      extraInputValue <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTotalAdditionalInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> totalOutputsValue <span class="token operator">=</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTotalAdditionalOutputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> fee<span class="token punctuation">.</span>revealFeePlusOutputs<span class="token punctuation">;</span>
    <span class="token keyword">const</span> calculatedFee <span class="token operator">=</span> totalInputsValue <span class="token operator">-</span> totalOutputsValue<span class="token punctuation">;</span>
    <span class="token comment">// It will be invalid, but at least we know we don&#39;t need to add change</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>calculatedFee <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//  console.log(&#39;calculatedFee &lt;= 0&#39;, calculatedFee);</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> expectedFee <span class="token operator">=</span> fee<span class="token punctuation">.</span>commitFeeOnly<span class="token punctuation">;</span>
    <span class="token comment">// console.log(&#39;expectedFee&#39;, expectedFee);</span>
    <span class="token keyword">const</span> differenceBetweenCalculatedAndExpected <span class="token operator">=</span> calculatedFee <span class="token operator">-</span> expectedFee<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>differenceBetweenCalculatedAndExpected <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// There were some excess satoshis, but let&#39;s verify that it meets the dust threshold to make change</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>differenceBetweenCalculatedAndExpected <span class="token operator">&gt;=</span> <span class="token constant">DUST_AMOUNT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      pbst<span class="token punctuation">.</span><span class="token function">addOutput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        address<span class="token operator">:</span> address<span class="token punctuation">,</span>
        value<span class="token operator">:</span> differenceBetweenCalculatedAndExpected<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接" aria-hidden="true">#</a> 相关链接</h2>`,22),I={href:"https://mempool.space/docs/faq#what-is-a-mempool-explorer",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"提示",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#提示","aria-hidden":"true"},"#"),s(" 提示")],-1),T=n("p",null,[s("本想1天读完了解btc的input和output机制，发现"),n("code",null,"冰冻三尺，非一日之寒；滴水穿石，非一日之功"),s("，代码有些概念需要业务层面补充，如果笔者理解错误，请联系，3ks。")],-1);function A(C,F){const a=i("ExternalLinkIcon");return o(),e("div",null,[d,n("p",null,[s("在官方代码基础上"),n("a",m,[s("Github"),t(a)]),s("衍生出三方产品。")]),n("ol",null,[n("li",null,[n("a",v,[s("钱包"),t(a)]),s("，此钱包是基于"),n("a",b,[s("unisat-wallet"),t(a)]),s("修改而来。")]),n("li",null,[n("a",w,[s("代打服务"),t(a)]),s("，由于很多人不会使用cli工具，所以这里提供了网页版代打。")])]),f,n("p",null,[s("打1次收取1000聪，1周收益"),n("a",y,[s("8000刀"),t(a)]),s("。")]),g,n("p",null,[s("本想修改cli，让自己成本降低，修改代码失误把所有余额当gas打了出去，"),n("a",h,[s("耻辱柱。"),t(a)])]),x,n("ul",null,[n("li",null,[n("a",I,[s("btc mempool"),t(a)])])]),R,T])}const P=p(r,[["render",A],["__file","atomicals-core.html.vue"]]);export{P as default};
