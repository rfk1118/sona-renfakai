(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{471:function(t,_,v){"use strict";v.r(_);var e=v(8),r=Object(e.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"设计模式"}},[t._v("设计模式")]),t._v(" "),_("h2",{attrs:{id:"如何学习设计模式"}},[t._v("如何学习设计模式")]),t._v(" "),_("p",[t._v("学习设计模式时需要有两个动作：使用设计模式、阅读源码。")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),_("p",[t._v("六大原则请参考"),_("a",{attrs:{href:"https://book.douban.com/subject/1140457/",target:"_blank",rel:"noopener noreferrer"}},[t._v("敏捷软件开发"),_("OutboundLink")],1)])]),t._v(" "),_("h3",{attrs:{id:"使用设计模式"}},[t._v("使用设计模式")]),t._v(" "),_("p",[t._v("设计模式要在项目中常用(《刻意练习：如何从新手到大师》)，才能体会到各个模式的好坏，才能在合适的场景下将不同的设计模式组合起来，但是也不要为了设计而设计，这里有一个度，只有真正的把握了，才会不过度设计。如果过度设计了，需要及时修正，就像"),_("code",[t._v("ConcurrentHashMap")]),t._v("在"),_("code",[t._v("JDK1.8")]),t._v("之前、之后版本实现有所修正一样。")]),t._v(" "),_("h3",{attrs:{id:"阅读源码"}},[t._v("阅读源码")]),t._v(" "),_("p",[t._v("很多源码使用的设计模式都不是标准格式，是在原基础上产生了变种，所以懂了设计模式，在看源码会产生事半功倍的效果。")]),t._v(" "),_("h2",{attrs:{id:"设计模式连接"}},[t._v("设计模式连接")]),t._v(" "),_("h3",{attrs:{id:"创建型模式"}},[t._v("创建型模式")]),t._v(" "),_("ul",[_("li",[t._v("Factory")]),t._v(" "),_("li",[t._v("Abstract Factory")]),t._v(" "),_("li",[t._v("Builder")]),t._v(" "),_("li",[t._v("Prototype")]),t._v(" "),_("li",[t._v("Singleton")])]),t._v(" "),_("h3",{attrs:{id:"结构型模式"}},[t._v("结构型模式")]),t._v(" "),_("ul",[_("li",[t._v("Adapter")]),t._v(" "),_("li",[t._v("Bridge")]),t._v(" "),_("li",[t._v("Composite")]),t._v(" "),_("li",[t._v("Decorator")]),t._v(" "),_("li",[t._v("Facade")]),t._v(" "),_("li",[t._v("Flyweight")]),t._v(" "),_("li",[t._v("Proxy")])]),t._v(" "),_("h3",{attrs:{id:"行为模式"}},[t._v("行为模式")]),t._v(" "),_("ul",[_("li",[t._v("Chain of Responsibility")]),t._v(" "),_("li",[t._v("Command")]),t._v(" "),_("li",[t._v("Iterator")]),t._v(" "),_("li",[t._v("Mediator")]),t._v(" "),_("li",[t._v("Memento")]),t._v(" "),_("li",[t._v("Observer")]),t._v(" "),_("li",[t._v("State")]),t._v(" "),_("li",[t._v("Strategy")]),t._v(" "),_("li",[t._v("Template Method")]),t._v(" "),_("li",[t._v("Visitor")])]),t._v(" "),_("h3",{attrs:{id:"组合篇"}},[t._v("组合篇")]),t._v(" "),_("p",[t._v("先写完基础知识和简单应用，这里补充组合应用。")]),t._v(" "),_("h2",{attrs:{id:"推荐书籍"}},[t._v("推荐书籍")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://book.douban.com/subject/1052241/",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式"),_("OutboundLink")],1),t._v("\n本书以"),_("code",[t._v("C++")]),t._v("编写，被别人誉为经典，其实本人读的不多。")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://book.douban.com/subject/1140457/",target:"_blank",rel:"noopener noreferrer"}},[t._v("敏捷软件开发"),_("OutboundLink")],1),t._v("\n本书给了大量"),_("code",[t._v("Demo")]),t._v("，本人设计模式主要是从这本书中学习而来的。")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://book.douban.com/subject/30333919/",target:"_blank",rel:"noopener noreferrer"}},[t._v("架构整洁之道"),_("OutboundLink")],1),t._v("\n本书与《敏捷软件开发》中有部分重叠，会有一些设计模式应用补充，比如三方对接使用适配器模式开发，其核心还是架构设计思想。")]),t._v(" "),_("li",[_("a",{attrs:{href:"."}},[t._v("Dive Into DESIGN PATTERNS")]),t._v("\n本书案例比较好，后面文章以此为基础进行二次梳理，如有侵权，请邮件"),_("code",[t._v("rfk1118@icloud.com")]),t._v("联系到我，我会按照版权进行删除。书籍请自行查找")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://time.geekbang.org/column/intro/100039001",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式之美"),_("OutboundLink")],1),t._v("\n前Google工程师手把手教你写高质量代码，这个讲的也不错，我印象最深的是接口隔离。")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://book.douban.com/subject/25844633/",target:"_blank",rel:"noopener noreferrer"}},[t._v("实现领域驱动设计"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://book.douban.com/subject/26819666/",target:"_blank",rel:"noopener noreferrer"}},[t._v("领域驱动设计"),_("OutboundLink")],1),t._v("\n设计模式后面就是领域驱动开发，用设计模式+领域驱动开发可以让项目更好维护，可以降低设计的复杂度，才能真正的将DDD进行落地，空谈DDD其实很空洞。")])])])}),[],!1,null,null,null);_.default=r.exports}}]);